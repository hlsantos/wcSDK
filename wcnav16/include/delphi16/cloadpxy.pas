unit cloadpxy;

{ DO NOT EDIT THIS FILE!!! }
{ This file is automatically generated from cloadpxy.h by cpp2pas. }

interface

uses WinTypes, WinProcs, wctype, wcsapi;

function LoadProxyLibrary: Boolean; cdecl;
procedure FreeProxyLibrary; cdecl;
procedure CancelCall(
  s: TSock); cdecl;
procedure CancelByUserData(
  s: TSock); cdecl;
function GetMaxServerRequestTypes: Word; cdecl;
function LoginUser(
  hWnd: HWnd; 
  int: Word; 
  const name: PChar; 
  const password: PChar): TSock; cdecl;
function GetTimeLeftOnline(
  hWnd: HWnd; 
  int: Word): TSock; cdecl;
function WriteActivityLogEntry(
  hWnd: HWnd; 
  int: Word; 
  const text: PChar): TSock; cdecl;
function KeepAlive(
  hWnd: HWnd; 
  int: Word): TSock; cdecl;
function GetSystemInfo(
  hWnd: HWnd; 
  int: Word): TSock; cdecl;
function GetObjectFlags(
  hWnd: HWnd; 
  int: Word; 
  objectID: Longint): TSock; cdecl;
function GetObjectFlagsByName(
  hWnd: HWnd; 
  int: Word; 
  const objectname: PChar): TSock; cdecl;
function GetObjectInfo(
  hWnd: HWnd; 
  int: Word; 
  objectid: Longint; 
  objectclass: Longint; 
  const objectname: PChar): TSock; cdecl;
function GetServiceByName(
  hWnd: HWnd; 
  int: Word; 
  const name: PChar): TSock; cdecl;
function OpenService(
  hWnd: HWnd; 
  int: Word; 
  const addr: sockaddr_in; 
  timeout: WordBool): TSock; cdecl;
function GetServerContextHandle(
  hWnd: HWnd; 
  int: Word): TSock; cdecl;
function GetServerChallengeString(
  hWnd: HWnd; 
  int: Word): TSock; cdecl;
function OpenChannel(
  hWnd: HWnd; 
  int: Word; 
  const name: PChar; 
  timeout: WordBool): TSock; cdecl;
function WriteChannel(
  chandle: TSock; 
  dest: Longint; 
  userdata: Longint; 
  data: Pointer; 
  datasize: Longint): Integer; cdecl;
function GetPredefinedChatChannels(
  hWnd: HWnd; 
  int: Word): TSock; cdecl;
function GetUserList(
  hWnd: HWnd; 
  int: Word): TSock; cdecl;
function GetWhosOnline(
  hWnd: HWnd; 
  int: Word): TSock; cdecl;
function GetUserInfo(
  hWnd: HWnd; 
  int: Word; 
  const username: PChar; 
  userid: Longint): TSock; cdecl;
function GetNodeInfoByName(
  hWnd: HWnd; 
  int: Word; 
  const username: PChar): TSock; cdecl;
function SearchUserNames(
  hWnd: HWnd; 
  int: Word; 
  const username: PChar): TSock; cdecl;
function GetConferenceCount(
  hWnd: HWnd; 
  int: Word): TSock; cdecl;
function GetEffectiveConferenceCount(
  hWnd: HWnd; 
  int: Word): TSock; cdecl;
function GetConfDescs(
  hWnd: HWnd; 
  int: Word; 
  sorted: WordBool): TSock; cdecl;
function ListConferencesByNumber(
  hWnd: HWnd; 
  int: Word; 
  start: Longint; 
  count: Longint): TSock; cdecl;
function ListConferencesByName(
  hWnd: HWnd; 
  int: Word; 
  const name: PChar; 
  count: Longint): TSock; cdecl;
function GetVolatileConfInfo(
  hWnd: HWnd; 
  int: Word): TSock; cdecl;
function GetVolatileConfInfoEx(
  hWnd: HWnd; 
  int: Word): TSock; cdecl;
function GetVolatileConfInfo_SetConfs(
  s: TSock; 
  start: Longint; 
  count: Longint): Integer; cdecl;
function GetVolatileConfInfo_SetConfsDone(
  s: TSock): Integer; cdecl;
function SetLastRead(
  hWnd: HWnd; 
  int: Word; 
  conference: Longint; 
  lastread: Longint): TSock; cdecl;
function GetConferenceGroupCount(
  hWnd: HWnd; 
  int: Word): TSock; cdecl;
function GetEffectiveConferenceGroupCount(
  hWnd: HWnd; 
  int: Word): TSock; cdecl;
function GetConferenceGroups(
  hWnd: HWnd; 
  int: Word): TSock; cdecl;
function GetConferenceGroupAreas(
  hWnd: HWnd; 
  int: Word; 
  group: Longint): TSock; cdecl;
function SetConferenceFlags(
  hWnd: HWnd; 
  int: Word; 
  conference: Longint; 
  flags: Longint): TSock; cdecl;
function SetMultipleConferenceFlags(
  hWnd: HWnd; 
  int: Word): TSock; cdecl;
function SetMultipleConferenceFlags_SetData(
  s: TSock; 
  start: Longint; 
  runlength: Longint; 
  flags: Longint): Integer; cdecl;
function SetMultipleConferenceFlags_SetAll(
  s: TSock; 
  flags: Longint): Integer; cdecl;
function SetMultipleConferenceFlags_SetDone(
  s: TSock): Integer; cdecl;
function MarkMessageRead(
  hWnd: HWnd; 
  int: Word; 
  conference: Longint; 
  msgid: Longint; 
  flags: Longint): TSock; cdecl;
function ListMessagesByAreaNumber(
  hWnd: HWnd; 
  int: Word; 
  conference: Longint; 
  number: Longint; 
  count: Longint; 
  text: WordBool; 
  snoop: WordBool): TSock; cdecl;
function ListMessagesByAreaMsgId(
  hWnd: HWnd; 
  int: Word; 
  conference: Longint; 
  msgid: Longint; 
  count: Longint; 
  text: WordBool; 
  snoop: WordBool): TSock; cdecl;
function ListMessagesByAreaDate(
  hWnd: HWnd; 
  int: Word; 
  conference: Longint; 
  postedtime: TFileTime; 
  count: Longint; 
  text: WordBool; 
  snoop: WordBool): TSock; cdecl;
function ListMessagesBySearch(
  hWnd: HWnd; 
  int: Word; 
  const searchFrom: PChar; 
  const searchTo: PChar; 
  const searchSubject: PChar; 
  const searchBody: PChar; 
  start: Longint; 
  sFlags: Longint; 
  text: WordBool; 
  snoop: WordBool): TSock; cdecl;
function ListMessagesByUnread(
  hWnd: HWnd; 
  int: Word; 
  text: WordBool; 
  snoop: WordBool): TSock; cdecl;
function ListMessagesBackwardsByMsgId(
  hWnd: HWnd; 
  int: Word; 
  conference: Longint; 
  msgid: Longint; 
  count: Longint; 
  text: WordBool; 
  snoop: WordBool): TSock; cdecl;
function ListMessagesBackwardsByNumber(
  hWnd: HWnd; 
  int: Word; 
  conference: Longint; 
  number: Longint; 
  count: Longint; 
  text: WordBool; 
  snoop: WordBool): TSock; cdecl;
function ListMessagesByAreaNumberEx(
  hWnd: HWnd; 
  int: Word; 
  conference: Longint; 
  number: Longint; 
  count: Longint; 
  flags: Word): TSock; cdecl;
function ListMessagesByAreaMsgIdEx(
  hWnd: HWnd; 
  int: Word; 
  conference: Longint; 
  msgid: Longint; 
  count: Longint; 
  flags: Word): TSock; cdecl;
function ListMessagesByAreaDateEx(
  hWnd: HWnd; 
  int: Word; 
  conference: Longint; 
  postedtime: TFileTime; 
  count: Longint; 
  flags: Word): TSock; cdecl;
function ListMessagesBySearchEx(
  hWnd: HWnd; 
  int: Word; 
  const searchFrom: PChar; 
  const searchTo: PChar; 
  const searchSubject: PChar; 
  const searchBody: PChar; 
  start: Longint; 
  sFlags: Longint; 
  flags: Word): TSock; cdecl;
function ListMessagesByUnreadEx(
  hWnd: HWnd; 
  int: Word; 
  flags: Word): TSock; cdecl;
function ListMessagesBackwardsByMsgIdEx(
  hWnd: HWnd; 
  int: Word; 
  conference: Longint; 
  msgid: Longint; 
  count: Longint; 
  flags: Word): TSock; cdecl;
function ListMessagesBackwardsByNumberEx(
  hWnd: HWnd; 
  int: Word; 
  conference: Longint; 
  number: Longint; 
  count: Longint; 
  flags: Word): TSock; cdecl;
function SearchMessages_SetConfs(
  s: TSock; 
  start: Longint; 
  runlength: Longint): Integer; cdecl;
function SearchMessages_SetConfsDone(
  s: TSock): Integer; cdecl;
function GetMoreMessages(
  s: TSock; 
  count: Longint): Integer; cdecl;
function GetAllMessages(
  s: TSock): Integer; cdecl;
function AddMessage(
  hWnd: HWnd; 
  int: Word; 
  const msg: TMsgHeader): TSock; cdecl;
function DeleteMessage(
  hWnd: HWnd; 
  int: Word; 
  const conference: Longint; 
  const msgid: Longint): TSock; cdecl;
function GetCurrentUser(
  hWnd: HWnd; 
  int: Word): TSock; cdecl;
function UpdateCurrentUser(
  hWnd: HWnd; 
  int: Word; 
  const user: TUser): TSock; cdecl;
function GetSecurityProfile(
  hWnd: HWnd; 
  int: Word): TSock; cdecl;
function GetDownloadStats(
  hWnd: HWnd; 
  int: Word): TSock; cdecl;
function GetFileAreaCount(
  hWnd: HWnd; 
  int: Word): TSock; cdecl;
function GetEffectiveFileAreaCount(
  hWnd: HWnd; 
  int: Word): TSock; cdecl;
function GetFileAreas(
  hWnd: HWnd; 
  int: Word; 
  sorted: WordBool): TSock; cdecl;
function GetFileGroupCount(
  hWnd: HWnd; 
  int: Word): TSock; cdecl;
function GetEffectiveFileGroupCount(
  hWnd: HWnd; 
  int: Word): TSock; cdecl;
function GetFileGroups(
  hWnd: HWnd; 
  int: Word; 
  sorted: WordBool): TSock; cdecl;
function GetFileGroupAreas(
  hWnd: HWnd; 
  int: Word; 
  group: Longint): TSock; cdecl;
function ListFilesByName(
  hWnd: HWnd; 
  int: Word; 
  count: Longint): TSock; cdecl;
function ListFilesByDate(
  hWnd: HWnd; 
  int: Word; 
  count: Longint; 
  const startdate: TFileTime): TSock; cdecl;
function ListFilesBySearch(
  hWnd: HWnd; 
  int: Word; 
  count: Longint; 
  const search: PChar): TSock; cdecl;
function GetMoreFiles(
  s: TSock; 
  count: Longint): Integer; cdecl;
function GetAllFiles(
  s: TSock): Integer; cdecl;
function PauseFileList(
  s: TSock): Integer; cdecl;
function ResolveFileName(
  hWnd: HWnd; 
  int: Word; 
  const filename: PChar): TSock; cdecl;
function SetFileArea(
  s: TSock; 
  start: Word; 
  runlength: Word): Integer; cdecl;
function SetFileAreaDone(
  s: TSock): Integer; cdecl;
function GetFileDescription(
  hWnd: HWnd; 
  int: Word; 
  area: Word; 
  const fn: PChar): TSock; cdecl;
function UpdateFileInfo(
  hWnd: HWnd; 
  int: Word; 
  const filename: PChar; 
  area: Longint; 
  const origpassword: PChar; 
  const description: PChar; 
  const password: PChar; 
  updatelongdesc: WordBool; 
  longdescbytes: Word; 
  const longdescription: PChar): TSock; cdecl;
function DeleteFile(
  hWnd: HWnd; 
  int: Word; 
  area: Word; 
  const filename: PChar; 
  disktoo: WordBool): TSock; cdecl;
function ViewArchive(
  hWnd: HWnd; 
  int: Word; 
  area: Word; 
  const filename: PChar): TSock; cdecl;
function RequestOfflineFiles(
  hWnd: HWnd; 
  int: Word): TSock; cdecl;
function RequestOfflineFiles_Submit(
  s: TSock; 
  const fn: PChar; 
  area: Longint): Integer; cdecl;
function RequestOfflineFiles_Done(
  s: TSock): Integer; cdecl;
function DownloadFile(
  hWnd: HWnd; 
  int: Word; 
  const fn: PChar; 
  filesize: Longint; 
  crc: Longint): TSock; cdecl;
function UploadFile(
  hWnd: HWnd; 
  int: Word; 
  var filerec: TFullFileRecord): TSock; cdecl;
function UploadFileEx(
  hWnd: HWnd; 
  int: Word; 
  var filerec: TFullFileRecord; 
  flags: Word): TSock; cdecl;
function UploadMessageAttachment(
  hWnd: HWnd; 
  int: Word; 
  filesize: Longint): TSock; cdecl;
function SetAttachmentMessage(
  s: TSock; 
  conference: Word; 
  messageid: Longint): Integer; cdecl;
function SetAttachmentMessageDone(
  s: TSock): Integer; cdecl;
function SendFileData(
  s: TSock; 
  buf: Pointer; 
  size: Word): Integer; cdecl;
function CopyBeforeDownload(
  hWnd: HWnd; 
  int: Word): TSock; cdecl;
function CopyBeforeDownload_Submit(
  s: TSock; 
  id: Longint; 
  area: Longint; 
  const fn: PChar): Integer; cdecl;
function CopyBeforeDownload_Remove(
  s: TSock; 
  id: Longint): Integer; cdecl;
function GetPackageVersion(
  hWnd: HWnd; 
  int: Word; 
  const package: PChar; 
  const version: PChar): TSock; cdecl;
function SendMoreData(
  s: TSock; 
  buf: Pointer; 
  size: Word): Integer; cdecl;

implementation

var ReferenceCount: Integer;
    DllInstance: Word;

  pfCancelCall: procedure(
    s: TSock);
  pfCancelByUserData: procedure(
    s: TSock);
  pfGetMaxServerRequestTypes: function: Word;
  pfLoginUser: function(
    hWnd: HWnd; 
    int: Word; 
    const name: PChar; 
    const password: PChar): TSock;
  pfGetTimeLeftOnline: function(
    hWnd: HWnd; 
    int: Word): TSock;
  pfWriteActivityLogEntry: function(
    hWnd: HWnd; 
    int: Word; 
    const text: PChar): TSock;
  pfKeepAlive: function(
    hWnd: HWnd; 
    int: Word): TSock;
  pfGetSystemInfo: function(
    hWnd: HWnd; 
    int: Word): TSock;
  pfGetObjectFlags: function(
    hWnd: HWnd; 
    int: Word; 
    objectID: Longint): TSock;
  pfGetObjectFlagsByName: function(
    hWnd: HWnd; 
    int: Word; 
    const objectname: PChar): TSock;
  pfGetObjectInfo: function(
    hWnd: HWnd; 
    int: Word; 
    objectid: Longint; 
    objectclass: Longint; 
    const objectname: PChar): TSock;
  pfGetServiceByName: function(
    hWnd: HWnd; 
    int: Word; 
    const name: PChar): TSock;
  pfOpenService: function(
    hWnd: HWnd; 
    int: Word; 
    const addr: sockaddr_in; 
    timeout: WordBool): TSock;
  pfGetServerContextHandle: function(
    hWnd: HWnd; 
    int: Word): TSock;
  pfGetServerChallengeString: function(
    hWnd: HWnd; 
    int: Word): TSock;
  pfOpenChannel: function(
    hWnd: HWnd; 
    int: Word; 
    const name: PChar; 
    timeout: WordBool): TSock;
  pfWriteChannel: function(
    chandle: TSock; 
    dest: Longint; 
    userdata: Longint; 
    data: Pointer; 
    datasize: Longint): Integer;
  pfGetPredefinedChatChannels: function(
    hWnd: HWnd; 
    int: Word): TSock;
  pfGetUserList: function(
    hWnd: HWnd; 
    int: Word): TSock;
  pfGetWhosOnline: function(
    hWnd: HWnd; 
    int: Word): TSock;
  pfGetUserInfo: function(
    hWnd: HWnd; 
    int: Word; 
    const username: PChar; 
    userid: Longint): TSock;
  pfGetNodeInfoByName: function(
    hWnd: HWnd; 
    int: Word; 
    const username: PChar): TSock;
  pfSearchUserNames: function(
    hWnd: HWnd; 
    int: Word; 
    const username: PChar): TSock;
  pfGetConferenceCount: function(
    hWnd: HWnd; 
    int: Word): TSock;
  pfGetEffectiveConferenceCount: function(
    hWnd: HWnd; 
    int: Word): TSock;
  pfGetConfDescs: function(
    hWnd: HWnd; 
    int: Word; 
    sorted: WordBool): TSock;
  pfListConferencesByNumber: function(
    hWnd: HWnd; 
    int: Word; 
    start: Longint; 
    count: Longint): TSock;
  pfListConferencesByName: function(
    hWnd: HWnd; 
    int: Word; 
    const name: PChar; 
    count: Longint): TSock;
  pfGetVolatileConfInfo: function(
    hWnd: HWnd; 
    int: Word): TSock;
  pfGetVolatileConfInfoEx: function(
    hWnd: HWnd; 
    int: Word): TSock;
  pfGetVolatileConfInfo_SetConfs: function(
    s: TSock; 
    start: Longint; 
    count: Longint): Integer;
  pfGetVolatileConfInfo_SetConfsDone: function(
    s: TSock): Integer;
  pfSetLastRead: function(
    hWnd: HWnd; 
    int: Word; 
    conference: Longint; 
    lastread: Longint): TSock;
  pfGetConferenceGroupCount: function(
    hWnd: HWnd; 
    int: Word): TSock;
  pfGetEffectiveConferenceGroupCount: function(
    hWnd: HWnd; 
    int: Word): TSock;
  pfGetConferenceGroups: function(
    hWnd: HWnd; 
    int: Word): TSock;
  pfGetConferenceGroupAreas: function(
    hWnd: HWnd; 
    int: Word; 
    group: Longint): TSock;
  pfSetConferenceFlags: function(
    hWnd: HWnd; 
    int: Word; 
    conference: Longint; 
    flags: Longint): TSock;
  pfSetMultipleConferenceFlags: function(
    hWnd: HWnd; 
    int: Word): TSock;
  pfSetMultipleConferenceFlags_SetData: function(
    s: TSock; 
    start: Longint; 
    runlength: Longint; 
    flags: Longint): Integer;
  pfSetMultipleConferenceFlags_SetAll: function(
    s: TSock; 
    flags: Longint): Integer;
  pfSetMultipleConferenceFlags_SetDone: function(
    s: TSock): Integer;
  pfMarkMessageRead: function(
    hWnd: HWnd; 
    int: Word; 
    conference: Longint; 
    msgid: Longint; 
    flags: Longint): TSock;
  pfListMessagesByAreaNumber: function(
    hWnd: HWnd; 
    int: Word; 
    conference: Longint; 
    number: Longint; 
    count: Longint; 
    text: WordBool; 
    snoop: WordBool): TSock;
  pfListMessagesByAreaMsgId: function(
    hWnd: HWnd; 
    int: Word; 
    conference: Longint; 
    msgid: Longint; 
    count: Longint; 
    text: WordBool; 
    snoop: WordBool): TSock;
  pfListMessagesByAreaDate: function(
    hWnd: HWnd; 
    int: Word; 
    conference: Longint; 
    postedtime: TFileTime; 
    count: Longint; 
    text: WordBool; 
    snoop: WordBool): TSock;
  pfListMessagesBySearch: function(
    hWnd: HWnd; 
    int: Word; 
    const searchFrom: PChar; 
    const searchTo: PChar; 
    const searchSubject: PChar; 
    const searchBody: PChar; 
    start: Longint; 
    sFlags: Longint; 
    text: WordBool; 
    snoop: WordBool): TSock;
  pfListMessagesByUnread: function(
    hWnd: HWnd; 
    int: Word; 
    text: WordBool; 
    snoop: WordBool): TSock;
  pfListMessagesBackwardsByMsgId: function(
    hWnd: HWnd; 
    int: Word; 
    conference: Longint; 
    msgid: Longint; 
    count: Longint; 
    text: WordBool; 
    snoop: WordBool): TSock;
  pfListMessagesBackwardsByNumber: function(
    hWnd: HWnd; 
    int: Word; 
    conference: Longint; 
    number: Longint; 
    count: Longint; 
    text: WordBool; 
    snoop: WordBool): TSock;
  pfListMessagesByAreaNumberEx: function(
    hWnd: HWnd; 
    int: Word; 
    conference: Longint; 
    number: Longint; 
    count: Longint; 
    flags: Word): TSock;
  pfListMessagesByAreaMsgIdEx: function(
    hWnd: HWnd; 
    int: Word; 
    conference: Longint; 
    msgid: Longint; 
    count: Longint; 
    flags: Word): TSock;
  pfListMessagesByAreaDateEx: function(
    hWnd: HWnd; 
    int: Word; 
    conference: Longint; 
    postedtime: TFileTime; 
    count: Longint; 
    flags: Word): TSock;
  pfListMessagesBySearchEx: function(
    hWnd: HWnd; 
    int: Word; 
    const searchFrom: PChar; 
    const searchTo: PChar; 
    const searchSubject: PChar; 
    const searchBody: PChar; 
    start: Longint; 
    sFlags: Longint; 
    flags: Word): TSock;
  pfListMessagesByUnreadEx: function(
    hWnd: HWnd; 
    int: Word; 
    flags: Word): TSock;
  pfListMessagesBackwardsByMsgIdEx: function(
    hWnd: HWnd; 
    int: Word; 
    conference: Longint; 
    msgid: Longint; 
    count: Longint; 
    flags: Word): TSock;
  pfListMessagesBackwardsByNumberEx: function(
    hWnd: HWnd; 
    int: Word; 
    conference: Longint; 
    number: Longint; 
    count: Longint; 
    flags: Word): TSock;
  pfSearchMessages_SetConfs: function(
    s: TSock; 
    start: Longint; 
    runlength: Longint): Integer;
  pfSearchMessages_SetConfsDone: function(
    s: TSock): Integer;
  pfGetMoreMessages: function(
    s: TSock; 
    count: Longint): Integer;
  pfGetAllMessages: function(
    s: TSock): Integer;
  pfAddMessage: function(
    hWnd: HWnd; 
    int: Word; 
    const msg: TMsgHeader): TSock;
  pfDeleteMessage: function(
    hWnd: HWnd; 
    int: Word; 
    const conference: Longint; 
    const msgid: Longint): TSock;
  pfGetCurrentUser: function(
    hWnd: HWnd; 
    int: Word): TSock;
  pfUpdateCurrentUser: function(
    hWnd: HWnd; 
    int: Word; 
    const user: TUser): TSock;
  pfGetSecurityProfile: function(
    hWnd: HWnd; 
    int: Word): TSock;
  pfGetDownloadStats: function(
    hWnd: HWnd; 
    int: Word): TSock;
  pfGetFileAreaCount: function(
    hWnd: HWnd; 
    int: Word): TSock;
  pfGetEffectiveFileAreaCount: function(
    hWnd: HWnd; 
    int: Word): TSock;
  pfGetFileAreas: function(
    hWnd: HWnd; 
    int: Word; 
    sorted: WordBool): TSock;
  pfGetFileGroupCount: function(
    hWnd: HWnd; 
    int: Word): TSock;
  pfGetEffectiveFileGroupCount: function(
    hWnd: HWnd; 
    int: Word): TSock;
  pfGetFileGroups: function(
    hWnd: HWnd; 
    int: Word; 
    sorted: WordBool): TSock;
  pfGetFileGroupAreas: function(
    hWnd: HWnd; 
    int: Word; 
    group: Longint): TSock;
  pfListFilesByName: function(
    hWnd: HWnd; 
    int: Word; 
    count: Longint): TSock;
  pfListFilesByDate: function(
    hWnd: HWnd; 
    int: Word; 
    count: Longint; 
    const startdate: TFileTime): TSock;
  pfListFilesBySearch: function(
    hWnd: HWnd; 
    int: Word; 
    count: Longint; 
    const search: PChar): TSock;
  pfGetMoreFiles: function(
    s: TSock; 
    count: Longint): Integer;
  pfGetAllFiles: function(
    s: TSock): Integer;
  pfPauseFileList: function(
    s: TSock): Integer;
  pfResolveFileName: function(
    hWnd: HWnd; 
    int: Word; 
    const filename: PChar): TSock;
  pfSetFileArea: function(
    s: TSock; 
    start: Word; 
    runlength: Word): Integer;
  pfSetFileAreaDone: function(
    s: TSock): Integer;
  pfGetFileDescription: function(
    hWnd: HWnd; 
    int: Word; 
    area: Word; 
    const fn: PChar): TSock;
  pfUpdateFileInfo: function(
    hWnd: HWnd; 
    int: Word; 
    const filename: PChar; 
    area: Longint; 
    const origpassword: PChar; 
    const description: PChar; 
    const password: PChar; 
    updatelongdesc: WordBool; 
    longdescbytes: Word; 
    const longdescription: PChar): TSock;
  pfDeleteFile: function(
    hWnd: HWnd; 
    int: Word; 
    area: Word; 
    const filename: PChar; 
    disktoo: WordBool): TSock;
  pfViewArchive: function(
    hWnd: HWnd; 
    int: Word; 
    area: Word; 
    const filename: PChar): TSock;
  pfRequestOfflineFiles: function(
    hWnd: HWnd; 
    int: Word): TSock;
  pfRequestOfflineFiles_Submit: function(
    s: TSock; 
    const fn: PChar; 
    area: Longint): Integer;
  pfRequestOfflineFiles_Done: function(
    s: TSock): Integer;
  pfDownloadFile: function(
    hWnd: HWnd; 
    int: Word; 
    const fn: PChar; 
    filesize: Longint; 
    crc: Longint): TSock;
  pfUploadFile: function(
    hWnd: HWnd; 
    int: Word; 
    var filerec: TFullFileRecord): TSock;
  pfUploadFileEx: function(
    hWnd: HWnd; 
    int: Word; 
    var filerec: TFullFileRecord; 
    flags: Word): TSock;
  pfUploadMessageAttachment: function(
    hWnd: HWnd; 
    int: Word; 
    filesize: Longint): TSock;
  pfSetAttachmentMessage: function(
    s: TSock; 
    conference: Word; 
    messageid: Longint): Integer;
  pfSetAttachmentMessageDone: function(
    s: TSock): Integer;
  pfSendFileData: function(
    s: TSock; 
    buf: Pointer; 
    size: Word): Integer;
  pfCopyBeforeDownload: function(
    hWnd: HWnd; 
    int: Word): TSock;
  pfCopyBeforeDownload_Submit: function(
    s: TSock; 
    id: Longint; 
    area: Longint; 
    const fn: PChar): Integer;
  pfCopyBeforeDownload_Remove: function(
    s: TSock; 
    id: Longint): Integer;
  pfGetPackageVersion: function(
    hWnd: HWnd; 
    int: Word; 
    const package: PChar; 
    const version: PChar): TSock;
  pfSendMoreData: function(
    s: TSock; 
    buf: Pointer; 
    size: Word): Integer;

function LoadProxyLibrary: Boolean;
begin
  LoadProxyLibrary := True;
  if ReferenceCount = 0 then begin
    LoadProxyLibrary := False;
    DllInstance := LoadLibrary('wcproxy.dll');
    if DllInstance > HINSTANCE_ERROR then begin
      inc(ReferenceCount);
      @pfCancelCall := GetProcAddress(DllInstance, 'CancelCall');
      @pfCancelByUserData := GetProcAddress(DllInstance, 'CancelByUserData');
      @pfGetMaxServerRequestTypes := GetProcAddress(DllInstance, 'GetMaxServerRequestTypes');
      @pfLoginUser := GetProcAddress(DllInstance, 'LoginUser');
      @pfGetTimeLeftOnline := GetProcAddress(DllInstance, 'GetTimeLeftOnline');
      @pfWriteActivityLogEntry := GetProcAddress(DllInstance, 'WriteActivityLogEntry');
      @pfKeepAlive := GetProcAddress(DllInstance, 'KeepAlive');
      @pfGetSystemInfo := GetProcAddress(DllInstance, 'GetSystemInfo');
      @pfGetObjectFlags := GetProcAddress(DllInstance, 'GetObjectFlags');
      @pfGetObjectFlagsByName := GetProcAddress(DllInstance, 'GetObjectFlagsByName');
      @pfGetObjectInfo := GetProcAddress(DllInstance, 'GetObjectInfo');
      @pfGetServiceByName := GetProcAddress(DllInstance, 'GetServiceByName');
      @pfOpenService := GetProcAddress(DllInstance, 'OpenService');
      @pfGetServerContextHandle := GetProcAddress(DllInstance, 'GetServerContextHandle');
      @pfGetServerChallengeString := GetProcAddress(DllInstance, 'GetServerChallengeString');
      @pfOpenChannel := GetProcAddress(DllInstance, 'OpenChannel');
      @pfWriteChannel := GetProcAddress(DllInstance, 'WriteChannel');
      @pfGetPredefinedChatChannels := GetProcAddress(DllInstance, 'GetPredefinedChatChannels');
      @pfGetUserList := GetProcAddress(DllInstance, 'GetUserList');
      @pfGetWhosOnline := GetProcAddress(DllInstance, 'GetWhosOnline');
      @pfGetUserInfo := GetProcAddress(DllInstance, 'GetUserInfo');
      @pfGetNodeInfoByName := GetProcAddress(DllInstance, 'GetNodeInfoByName');
      @pfSearchUserNames := GetProcAddress(DllInstance, 'SearchUserNames');
      @pfGetConferenceCount := GetProcAddress(DllInstance, 'GetConferenceCount');
      @pfGetEffectiveConferenceCount := GetProcAddress(DllInstance, 'GetEffectiveConferenceCount');
      @pfGetConfDescs := GetProcAddress(DllInstance, 'GetConfDescs');
      @pfListConferencesByNumber := GetProcAddress(DllInstance, 'ListConferencesByNumber');
      @pfListConferencesByName := GetProcAddress(DllInstance, 'ListConferencesByName');
      @pfGetVolatileConfInfo := GetProcAddress(DllInstance, 'GetVolatileConfInfo');
      @pfGetVolatileConfInfoEx := GetProcAddress(DllInstance, 'GetVolatileConfInfoEx');
      @pfGetVolatileConfInfo_SetConfs := GetProcAddress(DllInstance, 'GetVolatileConfInfo_SetConfs');
      @pfGetVolatileConfInfo_SetConfsDone := GetProcAddress(DllInstance, 'GetVolatileConfInfo_SetConfsDone');
      @pfSetLastRead := GetProcAddress(DllInstance, 'SetLastRead');
      @pfGetConferenceGroupCount := GetProcAddress(DllInstance, 'GetConferenceGroupCount');
      @pfGetEffectiveConferenceGroupCount := GetProcAddress(DllInstance, 'GetEffectiveConferenceGroupCount');
      @pfGetConferenceGroups := GetProcAddress(DllInstance, 'GetConferenceGroups');
      @pfGetConferenceGroupAreas := GetProcAddress(DllInstance, 'GetConferenceGroupAreas');
      @pfSetConferenceFlags := GetProcAddress(DllInstance, 'SetConferenceFlags');
      @pfSetMultipleConferenceFlags := GetProcAddress(DllInstance, 'SetMultipleConferenceFlags');
      @pfSetMultipleConferenceFlags_SetData := GetProcAddress(DllInstance, 'SetMultipleConferenceFlags_SetData');
      @pfSetMultipleConferenceFlags_SetAll := GetProcAddress(DllInstance, 'SetMultipleConferenceFlags_SetAll');
      @pfSetMultipleConferenceFlags_SetDone := GetProcAddress(DllInstance, 'SetMultipleConferenceFlags_SetDone');
      @pfMarkMessageRead := GetProcAddress(DllInstance, 'MarkMessageRead');
      @pfListMessagesByAreaNumber := GetProcAddress(DllInstance, 'ListMessagesByAreaNumber');
      @pfListMessagesByAreaMsgId := GetProcAddress(DllInstance, 'ListMessagesByAreaMsgId');
      @pfListMessagesByAreaDate := GetProcAddress(DllInstance, 'ListMessagesByAreaDate');
      @pfListMessagesBySearch := GetProcAddress(DllInstance, 'ListMessagesBySearch');
      @pfListMessagesByUnread := GetProcAddress(DllInstance, 'ListMessagesByUnread');
      @pfListMessagesBackwardsByMsgId := GetProcAddress(DllInstance, 'ListMessagesBackwardsByMsgId');
      @pfListMessagesBackwardsByNumber := GetProcAddress(DllInstance, 'ListMessagesBackwardsByNumber');
      @pfListMessagesByAreaNumberEx := GetProcAddress(DllInstance, 'ListMessagesByAreaNumberEx');
      @pfListMessagesByAreaMsgIdEx := GetProcAddress(DllInstance, 'ListMessagesByAreaMsgIdEx');
      @pfListMessagesByAreaDateEx := GetProcAddress(DllInstance, 'ListMessagesByAreaDateEx');
      @pfListMessagesBySearchEx := GetProcAddress(DllInstance, 'ListMessagesBySearchEx');
      @pfListMessagesByUnreadEx := GetProcAddress(DllInstance, 'ListMessagesByUnreadEx');
      @pfListMessagesBackwardsByMsgIdEx := GetProcAddress(DllInstance, 'ListMessagesBackwardsByMsgIdEx');
      @pfListMessagesBackwardsByNumberEx := GetProcAddress(DllInstance, 'ListMessagesBackwardsByNumberEx');
      @pfSearchMessages_SetConfs := GetProcAddress(DllInstance, 'SearchMessages_SetConfs');
      @pfSearchMessages_SetConfsDone := GetProcAddress(DllInstance, 'SearchMessages_SetConfsDone');
      @pfGetMoreMessages := GetProcAddress(DllInstance, 'GetMoreMessages');
      @pfGetAllMessages := GetProcAddress(DllInstance, 'GetAllMessages');
      @pfAddMessage := GetProcAddress(DllInstance, 'AddMessage');
      @pfDeleteMessage := GetProcAddress(DllInstance, 'DeleteMessage');
      @pfGetCurrentUser := GetProcAddress(DllInstance, 'GetCurrentUser');
      @pfUpdateCurrentUser := GetProcAddress(DllInstance, 'UpdateCurrentUser');
      @pfGetSecurityProfile := GetProcAddress(DllInstance, 'GetSecurityProfile');
      @pfGetDownloadStats := GetProcAddress(DllInstance, 'GetDownloadStats');
      @pfGetFileAreaCount := GetProcAddress(DllInstance, 'GetFileAreaCount');
      @pfGetEffectiveFileAreaCount := GetProcAddress(DllInstance, 'GetEffectiveFileAreaCount');
      @pfGetFileAreas := GetProcAddress(DllInstance, 'GetFileAreas');
      @pfGetFileGroupCount := GetProcAddress(DllInstance, 'GetFileGroupCount');
      @pfGetEffectiveFileGroupCount := GetProcAddress(DllInstance, 'GetEffectiveFileGroupCount');
      @pfGetFileGroups := GetProcAddress(DllInstance, 'GetFileGroups');
      @pfGetFileGroupAreas := GetProcAddress(DllInstance, 'GetFileGroupAreas');
      @pfListFilesByName := GetProcAddress(DllInstance, 'ListFilesByName');
      @pfListFilesByDate := GetProcAddress(DllInstance, 'ListFilesByDate');
      @pfListFilesBySearch := GetProcAddress(DllInstance, 'ListFilesBySearch');
      @pfGetMoreFiles := GetProcAddress(DllInstance, 'GetMoreFiles');
      @pfGetAllFiles := GetProcAddress(DllInstance, 'GetAllFiles');
      @pfPauseFileList := GetProcAddress(DllInstance, 'PauseFileList');
      @pfResolveFileName := GetProcAddress(DllInstance, 'ResolveFileName');
      @pfSetFileArea := GetProcAddress(DllInstance, 'SetFileArea');
      @pfSetFileAreaDone := GetProcAddress(DllInstance, 'SetFileAreaDone');
      @pfGetFileDescription := GetProcAddress(DllInstance, 'GetFileDescription');
      @pfUpdateFileInfo := GetProcAddress(DllInstance, 'UpdateFileInfo');
      @pfDeleteFile := GetProcAddress(DllInstance, 'DeleteFile');
      @pfViewArchive := GetProcAddress(DllInstance, 'ViewArchive');
      @pfRequestOfflineFiles := GetProcAddress(DllInstance, 'RequestOfflineFiles');
      @pfRequestOfflineFiles_Submit := GetProcAddress(DllInstance, 'RequestOfflineFiles_Submit');
      @pfRequestOfflineFiles_Done := GetProcAddress(DllInstance, 'RequestOfflineFiles_Done');
      @pfDownloadFile := GetProcAddress(DllInstance, 'DownloadFile');
      @pfUploadFile := GetProcAddress(DllInstance, 'UploadFile');
      @pfUploadFileEx := GetProcAddress(DllInstance, 'UploadFileEx');
      @pfUploadMessageAttachment := GetProcAddress(DllInstance, 'UploadMessageAttachment');
      @pfSetAttachmentMessage := GetProcAddress(DllInstance, 'SetAttachmentMessage');
      @pfSetAttachmentMessageDone := GetProcAddress(DllInstance, 'SetAttachmentMessageDone');
      @pfSendFileData := GetProcAddress(DllInstance, 'SendFileData');
      @pfCopyBeforeDownload := GetProcAddress(DllInstance, 'CopyBeforeDownload');
      @pfCopyBeforeDownload_Submit := GetProcAddress(DllInstance, 'CopyBeforeDownload_Submit');
      @pfCopyBeforeDownload_Remove := GetProcAddress(DllInstance, 'CopyBeforeDownload_Remove');
      @pfGetPackageVersion := GetProcAddress(DllInstance, 'GetPackageVersion');
      @pfSendMoreData := GetProcAddress(DllInstance, 'SendMoreData');
      LoadProxyLibrary := True;
    end;
  end;
end;

procedure FreeProxyLibrary;
begin
  dec(ReferenceCount);
  if ReferenceCount = 0 then begin
    if DllInstance > HINSTANCE_ERROR then begin
      @pfCancelCall := nil;
      @pfCancelByUserData := nil;
      @pfGetMaxServerRequestTypes := nil;
      @pfLoginUser := nil;
      @pfGetTimeLeftOnline := nil;
      @pfWriteActivityLogEntry := nil;
      @pfKeepAlive := nil;
      @pfGetSystemInfo := nil;
      @pfGetObjectFlags := nil;
      @pfGetObjectFlagsByName := nil;
      @pfGetObjectInfo := nil;
      @pfGetServiceByName := nil;
      @pfOpenService := nil;
      @pfGetServerContextHandle := nil;
      @pfGetServerChallengeString := nil;
      @pfOpenChannel := nil;
      @pfWriteChannel := nil;
      @pfGetPredefinedChatChannels := nil;
      @pfGetUserList := nil;
      @pfGetWhosOnline := nil;
      @pfGetUserInfo := nil;
      @pfGetNodeInfoByName := nil;
      @pfSearchUserNames := nil;
      @pfGetConferenceCount := nil;
      @pfGetEffectiveConferenceCount := nil;
      @pfGetConfDescs := nil;
      @pfListConferencesByNumber := nil;
      @pfListConferencesByName := nil;
      @pfGetVolatileConfInfo := nil;
      @pfGetVolatileConfInfoEx := nil;
      @pfGetVolatileConfInfo_SetConfs := nil;
      @pfGetVolatileConfInfo_SetConfsDone := nil;
      @pfSetLastRead := nil;
      @pfGetConferenceGroupCount := nil;
      @pfGetEffectiveConferenceGroupCount := nil;
      @pfGetConferenceGroups := nil;
      @pfGetConferenceGroupAreas := nil;
      @pfSetConferenceFlags := nil;
      @pfSetMultipleConferenceFlags := nil;
      @pfSetMultipleConferenceFlags_SetData := nil;
      @pfSetMultipleConferenceFlags_SetAll := nil;
      @pfSetMultipleConferenceFlags_SetDone := nil;
      @pfMarkMessageRead := nil;
      @pfListMessagesByAreaNumber := nil;
      @pfListMessagesByAreaMsgId := nil;
      @pfListMessagesByAreaDate := nil;
      @pfListMessagesBySearch := nil;
      @pfListMessagesByUnread := nil;
      @pfListMessagesBackwardsByMsgId := nil;
      @pfListMessagesBackwardsByNumber := nil;
      @pfListMessagesByAreaNumberEx := nil;
      @pfListMessagesByAreaMsgIdEx := nil;
      @pfListMessagesByAreaDateEx := nil;
      @pfListMessagesBySearchEx := nil;
      @pfListMessagesByUnreadEx := nil;
      @pfListMessagesBackwardsByMsgIdEx := nil;
      @pfListMessagesBackwardsByNumberEx := nil;
      @pfSearchMessages_SetConfs := nil;
      @pfSearchMessages_SetConfsDone := nil;
      @pfGetMoreMessages := nil;
      @pfGetAllMessages := nil;
      @pfAddMessage := nil;
      @pfDeleteMessage := nil;
      @pfGetCurrentUser := nil;
      @pfUpdateCurrentUser := nil;
      @pfGetSecurityProfile := nil;
      @pfGetDownloadStats := nil;
      @pfGetFileAreaCount := nil;
      @pfGetEffectiveFileAreaCount := nil;
      @pfGetFileAreas := nil;
      @pfGetFileGroupCount := nil;
      @pfGetEffectiveFileGroupCount := nil;
      @pfGetFileGroups := nil;
      @pfGetFileGroupAreas := nil;
      @pfListFilesByName := nil;
      @pfListFilesByDate := nil;
      @pfListFilesBySearch := nil;
      @pfGetMoreFiles := nil;
      @pfGetAllFiles := nil;
      @pfPauseFileList := nil;
      @pfResolveFileName := nil;
      @pfSetFileArea := nil;
      @pfSetFileAreaDone := nil;
      @pfGetFileDescription := nil;
      @pfUpdateFileInfo := nil;
      @pfDeleteFile := nil;
      @pfViewArchive := nil;
      @pfRequestOfflineFiles := nil;
      @pfRequestOfflineFiles_Submit := nil;
      @pfRequestOfflineFiles_Done := nil;
      @pfDownloadFile := nil;
      @pfUploadFile := nil;
      @pfUploadFileEx := nil;
      @pfUploadMessageAttachment := nil;
      @pfSetAttachmentMessage := nil;
      @pfSetAttachmentMessageDone := nil;
      @pfSendFileData := nil;
      @pfCopyBeforeDownload := nil;
      @pfCopyBeforeDownload_Submit := nil;
      @pfCopyBeforeDownload_Remove := nil;
      @pfGetPackageVersion := nil;
      @pfSendMoreData := nil;
      FreeLibrary(DllInstance);
    end;
  end;
end;

procedure CancelCall(
    s: TSock);
begin
  if @pfCancelCall = nil then begin
    exit;
  end;
  pfCancelCall(
    s);
end;

procedure CancelByUserData(
    s: TSock);
begin
  if @pfCancelByUserData = nil then begin
    exit;
  end;
  pfCancelByUserData(
    s);
end;

function GetMaxServerRequestTypes: Word;
begin
  if @pfGetMaxServerRequestTypes = nil then begin
    GetMaxServerRequestTypes := 0;
    exit;
  end;
  GetMaxServerRequestTypes := pfGetMaxServerRequestTypes;
end;

function LoginUser(
    hWnd: HWnd; 
    int: Word; 
    const name: PChar; 
    const password: PChar): TSock;
begin
  if @pfLoginUser = nil then begin
    LoginUser := 0;
    exit;
  end;
  LoginUser := pfLoginUser(
    hWnd, 
    int, 
     name, 
     password);
end;

function GetTimeLeftOnline(
    hWnd: HWnd; 
    int: Word): TSock;
begin
  if @pfGetTimeLeftOnline = nil then begin
    GetTimeLeftOnline := 0;
    exit;
  end;
  GetTimeLeftOnline := pfGetTimeLeftOnline(
    hWnd, 
    int);
end;

function WriteActivityLogEntry(
    hWnd: HWnd; 
    int: Word; 
    const text: PChar): TSock;
begin
  if @pfWriteActivityLogEntry = nil then begin
    WriteActivityLogEntry := 0;
    exit;
  end;
  WriteActivityLogEntry := pfWriteActivityLogEntry(
    hWnd, 
    int, 
     text);
end;

function KeepAlive(
    hWnd: HWnd; 
    int: Word): TSock;
begin
  if @pfKeepAlive = nil then begin
    KeepAlive := 0;
    exit;
  end;
  KeepAlive := pfKeepAlive(
    hWnd, 
    int);
end;

function GetSystemInfo(
    hWnd: HWnd; 
    int: Word): TSock;
begin
  if @pfGetSystemInfo = nil then begin
    GetSystemInfo := 0;
    exit;
  end;
  GetSystemInfo := pfGetSystemInfo(
    hWnd, 
    int);
end;

function GetObjectFlags(
    hWnd: HWnd; 
    int: Word; 
    objectID: Longint): TSock;
begin
  if @pfGetObjectFlags = nil then begin
    GetObjectFlags := 0;
    exit;
  end;
  GetObjectFlags := pfGetObjectFlags(
    hWnd, 
    int, 
    objectID);
end;

function GetObjectFlagsByName(
    hWnd: HWnd; 
    int: Word; 
    const objectname: PChar): TSock;
begin
  if @pfGetObjectFlagsByName = nil then begin
    GetObjectFlagsByName := 0;
    exit;
  end;
  GetObjectFlagsByName := pfGetObjectFlagsByName(
    hWnd, 
    int, 
     objectname);
end;

function GetObjectInfo(
    hWnd: HWnd; 
    int: Word; 
    objectid: Longint; 
    objectclass: Longint; 
    const objectname: PChar): TSock;
begin
  if @pfGetObjectInfo = nil then begin
    GetObjectInfo := 0;
    exit;
  end;
  GetObjectInfo := pfGetObjectInfo(
    hWnd, 
    int, 
    objectid, 
    objectclass, 
     objectname);
end;

function GetServiceByName(
    hWnd: HWnd; 
    int: Word; 
    const name: PChar): TSock;
begin
  if @pfGetServiceByName = nil then begin
    GetServiceByName := 0;
    exit;
  end;
  GetServiceByName := pfGetServiceByName(
    hWnd, 
    int, 
     name);
end;

function OpenService(
    hWnd: HWnd; 
    int: Word; 
    const addr: sockaddr_in; 
    timeout: WordBool): TSock;
begin
  if @pfOpenService = nil then begin
    OpenService := 0;
    exit;
  end;
  OpenService := pfOpenService(
    hWnd, 
    int, 
     addr, 
    timeout);
end;

function GetServerContextHandle(
    hWnd: HWnd; 
    int: Word): TSock;
begin
  if @pfGetServerContextHandle = nil then begin
    GetServerContextHandle := 0;
    exit;
  end;
  GetServerContextHandle := pfGetServerContextHandle(
    hWnd, 
    int);
end;

function GetServerChallengeString(
    hWnd: HWnd; 
    int: Word): TSock;
begin
  if @pfGetServerChallengeString = nil then begin
    GetServerChallengeString := 0;
    exit;
  end;
  GetServerChallengeString := pfGetServerChallengeString(
    hWnd, 
    int);
end;

function OpenChannel(
    hWnd: HWnd; 
    int: Word; 
    const name: PChar; 
    timeout: WordBool): TSock;
begin
  if @pfOpenChannel = nil then begin
    OpenChannel := 0;
    exit;
  end;
  OpenChannel := pfOpenChannel(
    hWnd, 
    int, 
     name, 
    timeout);
end;

function WriteChannel(
    chandle: TSock; 
    dest: Longint; 
    userdata: Longint; 
    data: Pointer; 
    datasize: Longint): Integer;
begin
  if @pfWriteChannel = nil then begin
    WriteChannel := 0;
    exit;
  end;
  WriteChannel := pfWriteChannel(
    chandle, 
    dest, 
    userdata, 
    data, 
    datasize);
end;

function GetPredefinedChatChannels(
    hWnd: HWnd; 
    int: Word): TSock;
begin
  if @pfGetPredefinedChatChannels = nil then begin
    GetPredefinedChatChannels := 0;
    exit;
  end;
  GetPredefinedChatChannels := pfGetPredefinedChatChannels(
    hWnd, 
    int);
end;

function GetUserList(
    hWnd: HWnd; 
    int: Word): TSock;
begin
  if @pfGetUserList = nil then begin
    GetUserList := 0;
    exit;
  end;
  GetUserList := pfGetUserList(
    hWnd, 
    int);
end;

function GetWhosOnline(
    hWnd: HWnd; 
    int: Word): TSock;
begin
  if @pfGetWhosOnline = nil then begin
    GetWhosOnline := 0;
    exit;
  end;
  GetWhosOnline := pfGetWhosOnline(
    hWnd, 
    int);
end;

function GetUserInfo(
    hWnd: HWnd; 
    int: Word; 
    const username: PChar; 
    userid: Longint): TSock;
begin
  if @pfGetUserInfo = nil then begin
    GetUserInfo := 0;
    exit;
  end;
  GetUserInfo := pfGetUserInfo(
    hWnd, 
    int, 
     username, 
    userid);
end;

function GetNodeInfoByName(
    hWnd: HWnd; 
    int: Word; 
    const username: PChar): TSock;
begin
  if @pfGetNodeInfoByName = nil then begin
    GetNodeInfoByName := 0;
    exit;
  end;
  GetNodeInfoByName := pfGetNodeInfoByName(
    hWnd, 
    int, 
     username);
end;

function SearchUserNames(
    hWnd: HWnd; 
    int: Word; 
    const username: PChar): TSock;
begin
  if @pfSearchUserNames = nil then begin
    SearchUserNames := 0;
    exit;
  end;
  SearchUserNames := pfSearchUserNames(
    hWnd, 
    int, 
     username);
end;

function GetConferenceCount(
    hWnd: HWnd; 
    int: Word): TSock;
begin
  if @pfGetConferenceCount = nil then begin
    GetConferenceCount := 0;
    exit;
  end;
  GetConferenceCount := pfGetConferenceCount(
    hWnd, 
    int);
end;

function GetEffectiveConferenceCount(
    hWnd: HWnd; 
    int: Word): TSock;
begin
  if @pfGetEffectiveConferenceCount = nil then begin
    GetEffectiveConferenceCount := 0;
    exit;
  end;
  GetEffectiveConferenceCount := pfGetEffectiveConferenceCount(
    hWnd, 
    int);
end;

function GetConfDescs(
    hWnd: HWnd; 
    int: Word; 
    sorted: WordBool): TSock;
begin
  if @pfGetConfDescs = nil then begin
    GetConfDescs := 0;
    exit;
  end;
  GetConfDescs := pfGetConfDescs(
    hWnd, 
    int, 
    sorted);
end;

function ListConferencesByNumber(
    hWnd: HWnd; 
    int: Word; 
    start: Longint; 
    count: Longint): TSock;
begin
  if @pfListConferencesByNumber = nil then begin
    ListConferencesByNumber := 0;
    exit;
  end;
  ListConferencesByNumber := pfListConferencesByNumber(
    hWnd, 
    int, 
    start, 
    count);
end;

function ListConferencesByName(
    hWnd: HWnd; 
    int: Word; 
    const name: PChar; 
    count: Longint): TSock;
begin
  if @pfListConferencesByName = nil then begin
    ListConferencesByName := 0;
    exit;
  end;
  ListConferencesByName := pfListConferencesByName(
    hWnd, 
    int, 
     name, 
    count);
end;

function GetVolatileConfInfo(
    hWnd: HWnd; 
    int: Word): TSock;
begin
  if @pfGetVolatileConfInfo = nil then begin
    GetVolatileConfInfo := 0;
    exit;
  end;
  GetVolatileConfInfo := pfGetVolatileConfInfo(
    hWnd, 
    int);
end;

function GetVolatileConfInfoEx(
    hWnd: HWnd; 
    int: Word): TSock;
begin
  if @pfGetVolatileConfInfoEx = nil then begin
    GetVolatileConfInfoEx := 0;
    exit;
  end;
  GetVolatileConfInfoEx := pfGetVolatileConfInfoEx(
    hWnd, 
    int);
end;

function GetVolatileConfInfo_SetConfs(
    s: TSock; 
    start: Longint; 
    count: Longint): Integer;
begin
  if @pfGetVolatileConfInfo_SetConfs = nil then begin
    GetVolatileConfInfo_SetConfs := 0;
    exit;
  end;
  GetVolatileConfInfo_SetConfs := pfGetVolatileConfInfo_SetConfs(
    s, 
    start, 
    count);
end;

function GetVolatileConfInfo_SetConfsDone(
    s: TSock): Integer;
begin
  if @pfGetVolatileConfInfo_SetConfsDone = nil then begin
    GetVolatileConfInfo_SetConfsDone := 0;
    exit;
  end;
  GetVolatileConfInfo_SetConfsDone := pfGetVolatileConfInfo_SetConfsDone(
    s);
end;

function SetLastRead(
    hWnd: HWnd; 
    int: Word; 
    conference: Longint; 
    lastread: Longint): TSock;
begin
  if @pfSetLastRead = nil then begin
    SetLastRead := 0;
    exit;
  end;
  SetLastRead := pfSetLastRead(
    hWnd, 
    int, 
    conference, 
    lastread);
end;

function GetConferenceGroupCount(
    hWnd: HWnd; 
    int: Word): TSock;
begin
  if @pfGetConferenceGroupCount = nil then begin
    GetConferenceGroupCount := 0;
    exit;
  end;
  GetConferenceGroupCount := pfGetConferenceGroupCount(
    hWnd, 
    int);
end;

function GetEffectiveConferenceGroupCount(
    hWnd: HWnd; 
    int: Word): TSock;
begin
  if @pfGetEffectiveConferenceGroupCount = nil then begin
    GetEffectiveConferenceGroupCount := 0;
    exit;
  end;
  GetEffectiveConferenceGroupCount := pfGetEffectiveConferenceGroupCount(
    hWnd, 
    int);
end;

function GetConferenceGroups(
    hWnd: HWnd; 
    int: Word): TSock;
begin
  if @pfGetConferenceGroups = nil then begin
    GetConferenceGroups := 0;
    exit;
  end;
  GetConferenceGroups := pfGetConferenceGroups(
    hWnd, 
    int);
end;

function GetConferenceGroupAreas(
    hWnd: HWnd; 
    int: Word; 
    group: Longint): TSock;
begin
  if @pfGetConferenceGroupAreas = nil then begin
    GetConferenceGroupAreas := 0;
    exit;
  end;
  GetConferenceGroupAreas := pfGetConferenceGroupAreas(
    hWnd, 
    int, 
    group);
end;

function SetConferenceFlags(
    hWnd: HWnd; 
    int: Word; 
    conference: Longint; 
    flags: Longint): TSock;
begin
  if @pfSetConferenceFlags = nil then begin
    SetConferenceFlags := 0;
    exit;
  end;
  SetConferenceFlags := pfSetConferenceFlags(
    hWnd, 
    int, 
    conference, 
    flags);
end;

function SetMultipleConferenceFlags(
    hWnd: HWnd; 
    int: Word): TSock;
begin
  if @pfSetMultipleConferenceFlags = nil then begin
    SetMultipleConferenceFlags := 0;
    exit;
  end;
  SetMultipleConferenceFlags := pfSetMultipleConferenceFlags(
    hWnd, 
    int);
end;

function SetMultipleConferenceFlags_SetData(
    s: TSock; 
    start: Longint; 
    runlength: Longint; 
    flags: Longint): Integer;
begin
  if @pfSetMultipleConferenceFlags_SetData = nil then begin
    SetMultipleConferenceFlags_SetData := 0;
    exit;
  end;
  SetMultipleConferenceFlags_SetData := pfSetMultipleConferenceFlags_SetData(
    s, 
    start, 
    runlength, 
    flags);
end;

function SetMultipleConferenceFlags_SetAll(
    s: TSock; 
    flags: Longint): Integer;
begin
  if @pfSetMultipleConferenceFlags_SetAll = nil then begin
    SetMultipleConferenceFlags_SetAll := 0;
    exit;
  end;
  SetMultipleConferenceFlags_SetAll := pfSetMultipleConferenceFlags_SetAll(
    s, 
    flags);
end;

function SetMultipleConferenceFlags_SetDone(
    s: TSock): Integer;
begin
  if @pfSetMultipleConferenceFlags_SetDone = nil then begin
    SetMultipleConferenceFlags_SetDone := 0;
    exit;
  end;
  SetMultipleConferenceFlags_SetDone := pfSetMultipleConferenceFlags_SetDone(
    s);
end;

function MarkMessageRead(
    hWnd: HWnd; 
    int: Word; 
    conference: Longint; 
    msgid: Longint; 
    flags: Longint): TSock;
begin
  if @pfMarkMessageRead = nil then begin
    MarkMessageRead := 0;
    exit;
  end;
  MarkMessageRead := pfMarkMessageRead(
    hWnd, 
    int, 
    conference, 
    msgid, 
    flags);
end;

function ListMessagesByAreaNumber(
    hWnd: HWnd; 
    int: Word; 
    conference: Longint; 
    number: Longint; 
    count: Longint; 
    text: WordBool; 
    snoop: WordBool): TSock;
begin
  if @pfListMessagesByAreaNumber = nil then begin
    ListMessagesByAreaNumber := 0;
    exit;
  end;
  ListMessagesByAreaNumber := pfListMessagesByAreaNumber(
    hWnd, 
    int, 
    conference, 
    number, 
    count, 
    text, 
    snoop);
end;

function ListMessagesByAreaMsgId(
    hWnd: HWnd; 
    int: Word; 
    conference: Longint; 
    msgid: Longint; 
    count: Longint; 
    text: WordBool; 
    snoop: WordBool): TSock;
begin
  if @pfListMessagesByAreaMsgId = nil then begin
    ListMessagesByAreaMsgId := 0;
    exit;
  end;
  ListMessagesByAreaMsgId := pfListMessagesByAreaMsgId(
    hWnd, 
    int, 
    conference, 
    msgid, 
    count, 
    text, 
    snoop);
end;

function ListMessagesByAreaDate(
    hWnd: HWnd; 
    int: Word; 
    conference: Longint; 
    postedtime: TFileTime; 
    count: Longint; 
    text: WordBool; 
    snoop: WordBool): TSock;
begin
  if @pfListMessagesByAreaDate = nil then begin
    ListMessagesByAreaDate := 0;
    exit;
  end;
  ListMessagesByAreaDate := pfListMessagesByAreaDate(
    hWnd, 
    int, 
    conference, 
    postedtime, 
    count, 
    text, 
    snoop);
end;

function ListMessagesBySearch(
    hWnd: HWnd; 
    int: Word; 
    const searchFrom: PChar; 
    const searchTo: PChar; 
    const searchSubject: PChar; 
    const searchBody: PChar; 
    start: Longint; 
    sFlags: Longint; 
    text: WordBool; 
    snoop: WordBool): TSock;
begin
  if @pfListMessagesBySearch = nil then begin
    ListMessagesBySearch := 0;
    exit;
  end;
  ListMessagesBySearch := pfListMessagesBySearch(
    hWnd, 
    int, 
     searchFrom, 
     searchTo, 
     searchSubject, 
     searchBody, 
    start, 
    sFlags, 
    text, 
    snoop);
end;

function ListMessagesByUnread(
    hWnd: HWnd; 
    int: Word; 
    text: WordBool; 
    snoop: WordBool): TSock;
begin
  if @pfListMessagesByUnread = nil then begin
    ListMessagesByUnread := 0;
    exit;
  end;
  ListMessagesByUnread := pfListMessagesByUnread(
    hWnd, 
    int, 
    text, 
    snoop);
end;

function ListMessagesBackwardsByMsgId(
    hWnd: HWnd; 
    int: Word; 
    conference: Longint; 
    msgid: Longint; 
    count: Longint; 
    text: WordBool; 
    snoop: WordBool): TSock;
begin
  if @pfListMessagesBackwardsByMsgId = nil then begin
    ListMessagesBackwardsByMsgId := 0;
    exit;
  end;
  ListMessagesBackwardsByMsgId := pfListMessagesBackwardsByMsgId(
    hWnd, 
    int, 
    conference, 
    msgid, 
    count, 
    text, 
    snoop);
end;

function ListMessagesBackwardsByNumber(
    hWnd: HWnd; 
    int: Word; 
    conference: Longint; 
    number: Longint; 
    count: Longint; 
    text: WordBool; 
    snoop: WordBool): TSock;
begin
  if @pfListMessagesBackwardsByNumber = nil then begin
    ListMessagesBackwardsByNumber := 0;
    exit;
  end;
  ListMessagesBackwardsByNumber := pfListMessagesBackwardsByNumber(
    hWnd, 
    int, 
    conference, 
    number, 
    count, 
    text, 
    snoop);
end;

function ListMessagesByAreaNumberEx(
    hWnd: HWnd; 
    int: Word; 
    conference: Longint; 
    number: Longint; 
    count: Longint; 
    flags: Word): TSock;
begin
  if @pfListMessagesByAreaNumberEx = nil then begin
    ListMessagesByAreaNumberEx := 0;
    exit;
  end;
  ListMessagesByAreaNumberEx := pfListMessagesByAreaNumberEx(
    hWnd, 
    int, 
    conference, 
    number, 
    count, 
    flags);
end;

function ListMessagesByAreaMsgIdEx(
    hWnd: HWnd; 
    int: Word; 
    conference: Longint; 
    msgid: Longint; 
    count: Longint; 
    flags: Word): TSock;
begin
  if @pfListMessagesByAreaMsgIdEx = nil then begin
    ListMessagesByAreaMsgIdEx := 0;
    exit;
  end;
  ListMessagesByAreaMsgIdEx := pfListMessagesByAreaMsgIdEx(
    hWnd, 
    int, 
    conference, 
    msgid, 
    count, 
    flags);
end;

function ListMessagesByAreaDateEx(
    hWnd: HWnd; 
    int: Word; 
    conference: Longint; 
    postedtime: TFileTime; 
    count: Longint; 
    flags: Word): TSock;
begin
  if @pfListMessagesByAreaDateEx = nil then begin
    ListMessagesByAreaDateEx := 0;
    exit;
  end;
  ListMessagesByAreaDateEx := pfListMessagesByAreaDateEx(
    hWnd, 
    int, 
    conference, 
    postedtime, 
    count, 
    flags);
end;

function ListMessagesBySearchEx(
    hWnd: HWnd; 
    int: Word; 
    const searchFrom: PChar; 
    const searchTo: PChar; 
    const searchSubject: PChar; 
    const searchBody: PChar; 
    start: Longint; 
    sFlags: Longint; 
    flags: Word): TSock;
begin
  if @pfListMessagesBySearchEx = nil then begin
    ListMessagesBySearchEx := 0;
    exit;
  end;
  ListMessagesBySearchEx := pfListMessagesBySearchEx(
    hWnd, 
    int, 
     searchFrom, 
     searchTo, 
     searchSubject, 
     searchBody, 
    start, 
    sFlags, 
    flags);
end;

function ListMessagesByUnreadEx(
    hWnd: HWnd; 
    int: Word; 
    flags: Word): TSock;
begin
  if @pfListMessagesByUnreadEx = nil then begin
    ListMessagesByUnreadEx := 0;
    exit;
  end;
  ListMessagesByUnreadEx := pfListMessagesByUnreadEx(
    hWnd, 
    int, 
    flags);
end;

function ListMessagesBackwardsByMsgIdEx(
    hWnd: HWnd; 
    int: Word; 
    conference: Longint; 
    msgid: Longint; 
    count: Longint; 
    flags: Word): TSock;
begin
  if @pfListMessagesBackwardsByMsgIdEx = nil then begin
    ListMessagesBackwardsByMsgIdEx := 0;
    exit;
  end;
  ListMessagesBackwardsByMsgIdEx := pfListMessagesBackwardsByMsgIdEx(
    hWnd, 
    int, 
    conference, 
    msgid, 
    count, 
    flags);
end;

function ListMessagesBackwardsByNumberEx(
    hWnd: HWnd; 
    int: Word; 
    conference: Longint; 
    number: Longint; 
    count: Longint; 
    flags: Word): TSock;
begin
  if @pfListMessagesBackwardsByNumberEx = nil then begin
    ListMessagesBackwardsByNumberEx := 0;
    exit;
  end;
  ListMessagesBackwardsByNumberEx := pfListMessagesBackwardsByNumberEx(
    hWnd, 
    int, 
    conference, 
    number, 
    count, 
    flags);
end;

function SearchMessages_SetConfs(
    s: TSock; 
    start: Longint; 
    runlength: Longint): Integer;
begin
  if @pfSearchMessages_SetConfs = nil then begin
    SearchMessages_SetConfs := 0;
    exit;
  end;
  SearchMessages_SetConfs := pfSearchMessages_SetConfs(
    s, 
    start, 
    runlength);
end;

function SearchMessages_SetConfsDone(
    s: TSock): Integer;
begin
  if @pfSearchMessages_SetConfsDone = nil then begin
    SearchMessages_SetConfsDone := 0;
    exit;
  end;
  SearchMessages_SetConfsDone := pfSearchMessages_SetConfsDone(
    s);
end;

function GetMoreMessages(
    s: TSock; 
    count: Longint): Integer;
begin
  if @pfGetMoreMessages = nil then begin
    GetMoreMessages := 0;
    exit;
  end;
  GetMoreMessages := pfGetMoreMessages(
    s, 
    count);
end;

function GetAllMessages(
    s: TSock): Integer;
begin
  if @pfGetAllMessages = nil then begin
    GetAllMessages := 0;
    exit;
  end;
  GetAllMessages := pfGetAllMessages(
    s);
end;

function AddMessage(
    hWnd: HWnd; 
    int: Word; 
    const msg: TMsgHeader): TSock;
begin
  if @pfAddMessage = nil then begin
    AddMessage := 0;
    exit;
  end;
  AddMessage := pfAddMessage(
    hWnd, 
    int, 
     msg);
end;

function DeleteMessage(
    hWnd: HWnd; 
    int: Word; 
    const conference: Longint; 
    const msgid: Longint): TSock;
begin
  if @pfDeleteMessage = nil then begin
    DeleteMessage := 0;
    exit;
  end;
  DeleteMessage := pfDeleteMessage(
    hWnd, 
    int, 
     conference, 
     msgid);
end;

function GetCurrentUser(
    hWnd: HWnd; 
    int: Word): TSock;
begin
  if @pfGetCurrentUser = nil then begin
    GetCurrentUser := 0;
    exit;
  end;
  GetCurrentUser := pfGetCurrentUser(
    hWnd, 
    int);
end;

function UpdateCurrentUser(
    hWnd: HWnd; 
    int: Word; 
    const user: TUser): TSock;
begin
  if @pfUpdateCurrentUser = nil then begin
    UpdateCurrentUser := 0;
    exit;
  end;
  UpdateCurrentUser := pfUpdateCurrentUser(
    hWnd, 
    int, 
     user);
end;

function GetSecurityProfile(
    hWnd: HWnd; 
    int: Word): TSock;
begin
  if @pfGetSecurityProfile = nil then begin
    GetSecurityProfile := 0;
    exit;
  end;
  GetSecurityProfile := pfGetSecurityProfile(
    hWnd, 
    int);
end;

function GetDownloadStats(
    hWnd: HWnd; 
    int: Word): TSock;
begin
  if @pfGetDownloadStats = nil then begin
    GetDownloadStats := 0;
    exit;
  end;
  GetDownloadStats := pfGetDownloadStats(
    hWnd, 
    int);
end;

function GetFileAreaCount(
    hWnd: HWnd; 
    int: Word): TSock;
begin
  if @pfGetFileAreaCount = nil then begin
    GetFileAreaCount := 0;
    exit;
  end;
  GetFileAreaCount := pfGetFileAreaCount(
    hWnd, 
    int);
end;

function GetEffectiveFileAreaCount(
    hWnd: HWnd; 
    int: Word): TSock;
begin
  if @pfGetEffectiveFileAreaCount = nil then begin
    GetEffectiveFileAreaCount := 0;
    exit;
  end;
  GetEffectiveFileAreaCount := pfGetEffectiveFileAreaCount(
    hWnd, 
    int);
end;

function GetFileAreas(
    hWnd: HWnd; 
    int: Word; 
    sorted: WordBool): TSock;
begin
  if @pfGetFileAreas = nil then begin
    GetFileAreas := 0;
    exit;
  end;
  GetFileAreas := pfGetFileAreas(
    hWnd, 
    int, 
    sorted);
end;

function GetFileGroupCount(
    hWnd: HWnd; 
    int: Word): TSock;
begin
  if @pfGetFileGroupCount = nil then begin
    GetFileGroupCount := 0;
    exit;
  end;
  GetFileGroupCount := pfGetFileGroupCount(
    hWnd, 
    int);
end;

function GetEffectiveFileGroupCount(
    hWnd: HWnd; 
    int: Word): TSock;
begin
  if @pfGetEffectiveFileGroupCount = nil then begin
    GetEffectiveFileGroupCount := 0;
    exit;
  end;
  GetEffectiveFileGroupCount := pfGetEffectiveFileGroupCount(
    hWnd, 
    int);
end;

function GetFileGroups(
    hWnd: HWnd; 
    int: Word; 
    sorted: WordBool): TSock;
begin
  if @pfGetFileGroups = nil then begin
    GetFileGroups := 0;
    exit;
  end;
  GetFileGroups := pfGetFileGroups(
    hWnd, 
    int, 
    sorted);
end;

function GetFileGroupAreas(
    hWnd: HWnd; 
    int: Word; 
    group: Longint): TSock;
begin
  if @pfGetFileGroupAreas = nil then begin
    GetFileGroupAreas := 0;
    exit;
  end;
  GetFileGroupAreas := pfGetFileGroupAreas(
    hWnd, 
    int, 
    group);
end;

function ListFilesByName(
    hWnd: HWnd; 
    int: Word; 
    count: Longint): TSock;
begin
  if @pfListFilesByName = nil then begin
    ListFilesByName := 0;
    exit;
  end;
  ListFilesByName := pfListFilesByName(
    hWnd, 
    int, 
    count);
end;

function ListFilesByDate(
    hWnd: HWnd; 
    int: Word; 
    count: Longint; 
    const startdate: TFileTime): TSock;
begin
  if @pfListFilesByDate = nil then begin
    ListFilesByDate := 0;
    exit;
  end;
  ListFilesByDate := pfListFilesByDate(
    hWnd, 
    int, 
    count, 
     startdate);
end;

function ListFilesBySearch(
    hWnd: HWnd; 
    int: Word; 
    count: Longint; 
    const search: PChar): TSock;
begin
  if @pfListFilesBySearch = nil then begin
    ListFilesBySearch := 0;
    exit;
  end;
  ListFilesBySearch := pfListFilesBySearch(
    hWnd, 
    int, 
    count, 
     search);
end;

function GetMoreFiles(
    s: TSock; 
    count: Longint): Integer;
begin
  if @pfGetMoreFiles = nil then begin
    GetMoreFiles := 0;
    exit;
  end;
  GetMoreFiles := pfGetMoreFiles(
    s, 
    count);
end;

function GetAllFiles(
    s: TSock): Integer;
begin
  if @pfGetAllFiles = nil then begin
    GetAllFiles := 0;
    exit;
  end;
  GetAllFiles := pfGetAllFiles(
    s);
end;

function PauseFileList(
    s: TSock): Integer;
begin
  if @pfPauseFileList = nil then begin
    PauseFileList := 0;
    exit;
  end;
  PauseFileList := pfPauseFileList(
    s);
end;

function ResolveFileName(
    hWnd: HWnd; 
    int: Word; 
    const filename: PChar): TSock;
begin
  if @pfResolveFileName = nil then begin
    ResolveFileName := 0;
    exit;
  end;
  ResolveFileName := pfResolveFileName(
    hWnd, 
    int, 
     filename);
end;

function SetFileArea(
    s: TSock; 
    start: Word; 
    runlength: Word): Integer;
begin
  if @pfSetFileArea = nil then begin
    SetFileArea := 0;
    exit;
  end;
  SetFileArea := pfSetFileArea(
    s, 
    start, 
    runlength);
end;

function SetFileAreaDone(
    s: TSock): Integer;
begin
  if @pfSetFileAreaDone = nil then begin
    SetFileAreaDone := 0;
    exit;
  end;
  SetFileAreaDone := pfSetFileAreaDone(
    s);
end;

function GetFileDescription(
    hWnd: HWnd; 
    int: Word; 
    area: Word; 
    const fn: PChar): TSock;
begin
  if @pfGetFileDescription = nil then begin
    GetFileDescription := 0;
    exit;
  end;
  GetFileDescription := pfGetFileDescription(
    hWnd, 
    int, 
    area, 
     fn);
end;

function UpdateFileInfo(
    hWnd: HWnd; 
    int: Word; 
    const filename: PChar; 
    area: Longint; 
    const origpassword: PChar; 
    const description: PChar; 
    const password: PChar; 
    updatelongdesc: WordBool; 
    longdescbytes: Word; 
    const longdescription: PChar): TSock;
begin
  if @pfUpdateFileInfo = nil then begin
    UpdateFileInfo := 0;
    exit;
  end;
  UpdateFileInfo := pfUpdateFileInfo(
    hWnd, 
    int, 
     filename, 
    area, 
     origpassword, 
     description, 
     password, 
    updatelongdesc, 
    longdescbytes, 
     longdescription);
end;

function DeleteFile(
    hWnd: HWnd; 
    int: Word; 
    area: Word; 
    const filename: PChar; 
    disktoo: WordBool): TSock;
begin
  if @pfDeleteFile = nil then begin
    DeleteFile := 0;
    exit;
  end;
  DeleteFile := pfDeleteFile(
    hWnd, 
    int, 
    area, 
     filename, 
    disktoo);
end;

function ViewArchive(
    hWnd: HWnd; 
    int: Word; 
    area: Word; 
    const filename: PChar): TSock;
begin
  if @pfViewArchive = nil then begin
    ViewArchive := 0;
    exit;
  end;
  ViewArchive := pfViewArchive(
    hWnd, 
    int, 
    area, 
     filename);
end;

function RequestOfflineFiles(
    hWnd: HWnd; 
    int: Word): TSock;
begin
  if @pfRequestOfflineFiles = nil then begin
    RequestOfflineFiles := 0;
    exit;
  end;
  RequestOfflineFiles := pfRequestOfflineFiles(
    hWnd, 
    int);
end;

function RequestOfflineFiles_Submit(
    s: TSock; 
    const fn: PChar; 
    area: Longint): Integer;
begin
  if @pfRequestOfflineFiles_Submit = nil then begin
    RequestOfflineFiles_Submit := 0;
    exit;
  end;
  RequestOfflineFiles_Submit := pfRequestOfflineFiles_Submit(
    s, 
     fn, 
    area);
end;

function RequestOfflineFiles_Done(
    s: TSock): Integer;
begin
  if @pfRequestOfflineFiles_Done = nil then begin
    RequestOfflineFiles_Done := 0;
    exit;
  end;
  RequestOfflineFiles_Done := pfRequestOfflineFiles_Done(
    s);
end;

function DownloadFile(
    hWnd: HWnd; 
    int: Word; 
    const fn: PChar; 
    filesize: Longint; 
    crc: Longint): TSock;
begin
  if @pfDownloadFile = nil then begin
    DownloadFile := 0;
    exit;
  end;
  DownloadFile := pfDownloadFile(
    hWnd, 
    int, 
     fn, 
    filesize, 
    crc);
end;

function UploadFile(
    hWnd: HWnd; 
    int: Word; 
    var filerec: TFullFileRecord): TSock;
begin
  if @pfUploadFile = nil then begin
    UploadFile := 0;
    exit;
  end;
  UploadFile := pfUploadFile(
    hWnd, 
    int, 
     filerec);
end;

function UploadFileEx(
    hWnd: HWnd; 
    int: Word; 
    var filerec: TFullFileRecord; 
    flags: Word): TSock;
begin
  if @pfUploadFileEx = nil then begin
    UploadFileEx := 0;
    exit;
  end;
  UploadFileEx := pfUploadFileEx(
    hWnd, 
    int, 
     filerec, 
    flags);
end;

function UploadMessageAttachment(
    hWnd: HWnd; 
    int: Word; 
    filesize: Longint): TSock;
begin
  if @pfUploadMessageAttachment = nil then begin
    UploadMessageAttachment := 0;
    exit;
  end;
  UploadMessageAttachment := pfUploadMessageAttachment(
    hWnd, 
    int, 
    filesize);
end;

function SetAttachmentMessage(
    s: TSock; 
    conference: Word; 
    messageid: Longint): Integer;
begin
  if @pfSetAttachmentMessage = nil then begin
    SetAttachmentMessage := 0;
    exit;
  end;
  SetAttachmentMessage := pfSetAttachmentMessage(
    s, 
    conference, 
    messageid);
end;

function SetAttachmentMessageDone(
    s: TSock): Integer;
begin
  if @pfSetAttachmentMessageDone = nil then begin
    SetAttachmentMessageDone := 0;
    exit;
  end;
  SetAttachmentMessageDone := pfSetAttachmentMessageDone(
    s);
end;

function SendFileData(
    s: TSock; 
    buf: Pointer; 
    size: Word): Integer;
begin
  if @pfSendFileData = nil then begin
    SendFileData := 0;
    exit;
  end;
  SendFileData := pfSendFileData(
    s, 
    buf, 
    size);
end;

function CopyBeforeDownload(
    hWnd: HWnd; 
    int: Word): TSock;
begin
  if @pfCopyBeforeDownload = nil then begin
    CopyBeforeDownload := 0;
    exit;
  end;
  CopyBeforeDownload := pfCopyBeforeDownload(
    hWnd, 
    int);
end;

function CopyBeforeDownload_Submit(
    s: TSock; 
    id: Longint; 
    area: Longint; 
    const fn: PChar): Integer;
begin
  if @pfCopyBeforeDownload_Submit = nil then begin
    CopyBeforeDownload_Submit := 0;
    exit;
  end;
  CopyBeforeDownload_Submit := pfCopyBeforeDownload_Submit(
    s, 
    id, 
    area, 
     fn);
end;

function CopyBeforeDownload_Remove(
    s: TSock; 
    id: Longint): Integer;
begin
  if @pfCopyBeforeDownload_Remove = nil then begin
    CopyBeforeDownload_Remove := 0;
    exit;
  end;
  CopyBeforeDownload_Remove := pfCopyBeforeDownload_Remove(
    s, 
    id);
end;

function GetPackageVersion(
    hWnd: HWnd; 
    int: Word; 
    const package: PChar; 
    const version: PChar): TSock;
begin
  if @pfGetPackageVersion = nil then begin
    GetPackageVersion := 0;
    exit;
  end;
  GetPackageVersion := pfGetPackageVersion(
    hWnd, 
    int, 
     package, 
     version);
end;

function SendMoreData(
    s: TSock; 
    buf: Pointer; 
    size: Word): Integer;
begin
  if @pfSendMoreData = nil then begin
    SendMoreData := 0;
    exit;
  end;
  SendMoreData := pfSendMoreData(
    s, 
    buf, 
    size);
end;


end.
