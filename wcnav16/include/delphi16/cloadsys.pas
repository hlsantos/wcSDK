unit cloadsys;

{ DO NOT EDIT THIS FILE!!! }
{ This file is automatically generated from cloadsys.h by cpp2pas. }

interface

uses WinTypes, WinProcs, wctype, wcstype;

function LoadWcSystemLibrary: Boolean; cdecl;
procedure FreeWcSystemLibrary; cdecl;
procedure SetConnectionManagerConnected(
  value: WordBool);
procedure SetConnectionManagerStarted(
  value: WordBool; 
  wnd: HWnd; 
  wMsg: Word);
function CloseAllClients: Longint;
function IsConnectionManagerOnline: Longint;
function IsConnectionManagerStarted: Longint;
function ConnectionManagerDisconnect: Longint;
function ConnectionManagerShouldClose: Longint;
function WildcatNavigatorGetClientCount: Longint;
function WildcatNavigatorGetClientInfo(
  nIndex: Longint; 
  var ci: client_info): Longint;
function WildcatNavigatorStartup(
  hWnd: HWnd; 
  wMsg: Word): Longint;
function WildcatNavigatorStartupEx(
  hWnd: HWnd; 
  wMsg: Word; 
  flags: Longint): Longint;
procedure WildcatNavigatorCleanup(
  hWnd: HWnd);
function WildcatNavigatorGetClientFlags(
  hWnd: HWnd): Longint;
function WildcatNavigatorSetClientFlags(
  hWnd: HWnd; 
  flags: Longint): Longint;
function WcShowTransferStatus: Longint;
function WcDownloadFileDirect(
  const filename: PChar; 
  expected: Longint; 
  const downloadpath: PChar; 
  downloadAndRun: WordBool; 
  const downloadName: PChar): Longint;
function WcDownloadFile(
  const filename: PChar; 
  area: Word; 
  expected: Longint; 
  const downloadpath: PChar; 
  downloadAndRun: WordBool): Longint;
function WcDownloadAttachment(
  const filename: PChar; 
  msgid: Longint; 
  conf: Longint; 
  const downloadPath: PChar; 
  downloadAndRun: WordBool): Longint;
function WcUploadFile(
  const filename: PChar; 
  const filerec: TFullFileRecord): Longint;
function WcUploadFileEx(
  const filename: PChar; 
  const filerec: TFullFileRecord; 
  flags: Word): Longint;
function WcDownloadFileMultiple(
  info: Word{HGlobal}): Longint;
function WcDownloadAttachmentMultiple(
  info: Word{HGlobal}): Longint;
function WcUploadFileMultiple(
  info: Word{HGlobal}): Longint;
function WcUploadFileExMultiple(
  info: Word{HGlobal}): Longint;
function WcWriteMessage(
  const touser: TUserInfo; 
  const fromuser: TUserInfo; 
  const subject: PChar): Longint;
function WcReadNewMail: Longint;
function WcWriteUserPage(
  const touser: PChar; 
  const fromuser: PChar; 
  const message: PChar; 
  flags: Longint): Longint;
procedure ConfigureNavigatorSounds;
procedure RegisterNavigatorSound(
  const app: PChar; 
  const event: PChar; 
  const defsound: PChar);
procedure PlayNavigatorSound(
  const app: PChar; 
  const event: PChar);
function WcCheckClientVersion(
  const clientname: PChar; 
  const version: PChar): Longint;
function WcGetClientVersion(
  clientversion: PChar; 
  const clientname: PChar; 
  maxlen: Integer): Longint;
function WcRunClient(
  const clientname: PChar; 
  const sendinfo: WcRunClientStructure): Longint;
function WcRunClientEx(
  const clientname: PChar; 
  const sendinfo: WcRunClientStructure; 
  flags: Longint): Longint;
function WcCheckMail: Longint;
function WcAddUserAddress(
  parent: HWnd; 
  var entry: WcAddressBookEntry): Longint;
function WcGetRecipientList(
  parent: HWnd; 
  const addresstype: PChar; 
  carboncopy: WordBool; 
  list: THandle): Longint;
function WcGetGroupList(
  const group: PChar; 
  const addresstype: PChar): THandle;
function WcManageAddressBook(
  parent: HWnd): Longint;
procedure SetCurrentSystemDirty; cdecl;
function GetCurrentSystemName: PChar; cdecl;
function GetCurrentSystemRegNo: PChar; cdecl;
function IsCustomConnector: Boolean;

implementation

var ReferenceCount: Integer;
    DllInstance: Word;

  pfSetConnectionManagerConnected: procedure(
    value: WordBool);
  pfSetConnectionManagerStarted: procedure(
    value: WordBool; 
    wnd: HWnd; 
    wMsg: Word);
  pfCloseAllClients: function: Longint;
  pfIsConnectionManagerOnline: function: Longint;
  pfIsConnectionManagerStarted: function: Longint;
  pfConnectionManagerDisconnect: function: Longint;
  pfConnectionManagerShouldClose: function: Longint;
  pfWildcatNavigatorGetClientCount: function: Longint;
  pfWildcatNavigatorGetClientInfo: function(
    nIndex: Longint; 
    var ci: client_info): Longint;
  pfWildcatNavigatorStartup: function(
    hWnd: HWnd; 
    wMsg: Word): Longint;
  pfWildcatNavigatorStartupEx: function(
    hWnd: HWnd; 
    wMsg: Word; 
    flags: Longint): Longint;
  pfWildcatNavigatorCleanup: procedure(
    hWnd: HWnd);
  pfWildcatNavigatorGetClientFlags: function(
    hWnd: HWnd): Longint;
  pfWildcatNavigatorSetClientFlags: function(
    hWnd: HWnd; 
    flags: Longint): Longint;
  pfWcShowTransferStatus: function: Longint;
  pfWcDownloadFileDirect: function(
    const filename: PChar; 
    expected: Longint; 
    const downloadpath: PChar; 
    downloadAndRun: WordBool; 
    const downloadName: PChar): Longint;
  pfWcDownloadFile: function(
    const filename: PChar; 
    area: Word; 
    expected: Longint; 
    const downloadpath: PChar; 
    downloadAndRun: WordBool): Longint;
  pfWcDownloadAttachment: function(
    const filename: PChar; 
    msgid: Longint; 
    conf: Longint; 
    const downloadPath: PChar; 
    downloadAndRun: WordBool): Longint;
  pfWcUploadFile: function(
    const filename: PChar; 
    const filerec: TFullFileRecord): Longint;
  pfWcUploadFileEx: function(
    const filename: PChar; 
    const filerec: TFullFileRecord; 
    flags: Word): Longint;
  pfWcDownloadFileMultiple: function(
    info: Word{HGlobal}): Longint;
  pfWcDownloadAttachmentMultiple: function(
    info: Word{HGlobal}): Longint;
  pfWcUploadFileMultiple: function(
    info: Word{HGlobal}): Longint;
  pfWcUploadFileExMultiple: function(
    info: Word{HGlobal}): Longint;
  pfWcWriteMessage: function(
    const touser: TUserInfo; 
    const fromuser: TUserInfo; 
    const subject: PChar): Longint;
  pfWcReadNewMail: function: Longint;
  pfWcWriteUserPage: function(
    const touser: PChar; 
    const fromuser: PChar; 
    const message: PChar; 
    flags: Longint): Longint;
  pfConfigureNavigatorSounds: procedure;
  pfRegisterNavigatorSound: procedure(
    const app: PChar; 
    const event: PChar; 
    const defsound: PChar);
  pfPlayNavigatorSound: procedure(
    const app: PChar; 
    const event: PChar);
  pfWcCheckClientVersion: function(
    const clientname: PChar; 
    const version: PChar): Longint;
  pfWcGetClientVersion: function(
    clientversion: PChar; 
    const clientname: PChar; 
    maxlen: Integer): Longint;
  pfWcRunClient: function(
    const clientname: PChar; 
    const sendinfo: WcRunClientStructure): Longint;
  pfWcRunClientEx: function(
    const clientname: PChar; 
    const sendinfo: WcRunClientStructure; 
    flags: Longint): Longint;
  pfWcCheckMail: function: Longint;
  pfWcAddUserAddress: function(
    parent: HWnd; 
    var entry: WcAddressBookEntry): Longint;
  pfWcGetRecipientList: function(
    parent: HWnd; 
    const addresstype: PChar; 
    carboncopy: WordBool; 
    list: THandle): Longint;
  pfWcGetGroupList: function(
    const group: PChar; 
    const addresstype: PChar): THandle;
  pfWcManageAddressBook: function(
    parent: HWnd): Longint;
  pfSetCurrentSystemDirty: procedure;
  pfGetCurrentSystemName: function: PChar;
  pfGetCurrentSystemRegNo: function: PChar;
  pfIsCustomConnector: function: Boolean;

function LoadWcSystemLibrary: Boolean;
begin
  LoadWcSystemLibrary := True;
  if ReferenceCount = 0 then begin
    LoadWcSystemLibrary := False;
    DllInstance := LoadLibrary('wcsystem.dll');
    if DllInstance > HINSTANCE_ERROR then begin
      inc(ReferenceCount);
      @pfSetConnectionManagerConnected := GetProcAddress(DllInstance, 'SetConnectionManagerConnected');
      @pfSetConnectionManagerStarted := GetProcAddress(DllInstance, 'SetConnectionManagerStarted');
      @pfCloseAllClients := GetProcAddress(DllInstance, 'CloseAllClients');
      @pfIsConnectionManagerOnline := GetProcAddress(DllInstance, 'IsConnectionManagerOnline');
      @pfIsConnectionManagerStarted := GetProcAddress(DllInstance, 'IsConnectionManagerStarted');
      @pfConnectionManagerDisconnect := GetProcAddress(DllInstance, 'ConnectionManagerDisconnect');
      @pfConnectionManagerShouldClose := GetProcAddress(DllInstance, 'ConnectionManagerShouldClose');
      @pfWildcatNavigatorGetClientCount := GetProcAddress(DllInstance, 'WildcatNavigatorGetClientCount');
      @pfWildcatNavigatorGetClientInfo := GetProcAddress(DllInstance, 'WildcatNavigatorGetClientInfo');
      @pfWildcatNavigatorStartup := GetProcAddress(DllInstance, 'WildcatNavigatorStartup');
      @pfWildcatNavigatorStartupEx := GetProcAddress(DllInstance, 'WildcatNavigatorStartupEx');
      @pfWildcatNavigatorCleanup := GetProcAddress(DllInstance, 'WildcatNavigatorCleanup');
      @pfWildcatNavigatorGetClientFlags := GetProcAddress(DllInstance, 'WildcatNavigatorGetClientFlags');
      @pfWildcatNavigatorSetClientFlags := GetProcAddress(DllInstance, 'WildcatNavigatorSetClientFlags');
      @pfWcShowTransferStatus := GetProcAddress(DllInstance, 'WcShowTransferStatus');
      @pfWcDownloadFileDirect := GetProcAddress(DllInstance, 'WcDownloadFileDirect');
      @pfWcDownloadFile := GetProcAddress(DllInstance, 'WcDownloadFile');
      @pfWcDownloadAttachment := GetProcAddress(DllInstance, 'WcDownloadAttachment');
      @pfWcUploadFile := GetProcAddress(DllInstance, 'WcUploadFile');
      @pfWcUploadFileEx := GetProcAddress(DllInstance, 'WcUploadFileEx');
      @pfWcDownloadFileMultiple := GetProcAddress(DllInstance, 'WcDownloadFileMultiple');
      @pfWcDownloadAttachmentMultiple := GetProcAddress(DllInstance, 'WcDownloadAttachmentMultiple');
      @pfWcUploadFileMultiple := GetProcAddress(DllInstance, 'WcUploadFileMultiple');
      @pfWcUploadFileExMultiple := GetProcAddress(DllInstance, 'WcUploadFileExMultiple');
      @pfWcWriteMessage := GetProcAddress(DllInstance, 'WcWriteMessage');
      @pfWcReadNewMail := GetProcAddress(DllInstance, 'WcReadNewMail');
      @pfWcWriteUserPage := GetProcAddress(DllInstance, 'WcWriteUserPage');
      @pfConfigureNavigatorSounds := GetProcAddress(DllInstance, 'ConfigureNavigatorSounds');
      @pfRegisterNavigatorSound := GetProcAddress(DllInstance, 'RegisterNavigatorSound');
      @pfPlayNavigatorSound := GetProcAddress(DllInstance, 'PlayNavigatorSound');
      @pfWcCheckClientVersion := GetProcAddress(DllInstance, 'WcCheckClientVersion');
      @pfWcGetClientVersion := GetProcAddress(DllInstance, 'WcGetClientVersion');
      @pfWcRunClient := GetProcAddress(DllInstance, 'WcRunClient');
      @pfWcRunClientEx := GetProcAddress(DllInstance, 'WcRunClientEx');
      @pfWcCheckMail := GetProcAddress(DllInstance, 'WcCheckMail');
      @pfWcAddUserAddress := GetProcAddress(DllInstance, 'WcAddUserAddress');
      @pfWcGetRecipientList := GetProcAddress(DllInstance, 'WcGetRecipientList');
      @pfWcGetGroupList := GetProcAddress(DllInstance, 'WcGetGroupList');
      @pfWcManageAddressBook := GetProcAddress(DllInstance, 'WcManageAddressBook');
      @pfSetCurrentSystemDirty := GetProcAddress(DllInstance, 'SetCurrentSystemDirty');
      @pfGetCurrentSystemName := GetProcAddress(DllInstance, 'GetCurrentSystemName');
      @pfGetCurrentSystemRegNo := GetProcAddress(DllInstance, 'GetCurrentSystemRegNo');
      @pfIsCustomConnector := GetProcAddress(DllInstance, 'IsCustomConnector');
      LoadWcSystemLibrary := True;
    end;
  end;
end;

procedure FreeWcSystemLibrary;
begin
  dec(ReferenceCount);
  if ReferenceCount = 0 then begin
    if DllInstance > HINSTANCE_ERROR then begin
      @pfSetConnectionManagerConnected := nil;
      @pfSetConnectionManagerStarted := nil;
      @pfCloseAllClients := nil;
      @pfIsConnectionManagerOnline := nil;
      @pfIsConnectionManagerStarted := nil;
      @pfConnectionManagerDisconnect := nil;
      @pfConnectionManagerShouldClose := nil;
      @pfWildcatNavigatorGetClientCount := nil;
      @pfWildcatNavigatorGetClientInfo := nil;
      @pfWildcatNavigatorStartup := nil;
      @pfWildcatNavigatorStartupEx := nil;
      @pfWildcatNavigatorCleanup := nil;
      @pfWildcatNavigatorGetClientFlags := nil;
      @pfWildcatNavigatorSetClientFlags := nil;
      @pfWcShowTransferStatus := nil;
      @pfWcDownloadFileDirect := nil;
      @pfWcDownloadFile := nil;
      @pfWcDownloadAttachment := nil;
      @pfWcUploadFile := nil;
      @pfWcUploadFileEx := nil;
      @pfWcDownloadFileMultiple := nil;
      @pfWcDownloadAttachmentMultiple := nil;
      @pfWcUploadFileMultiple := nil;
      @pfWcUploadFileExMultiple := nil;
      @pfWcWriteMessage := nil;
      @pfWcReadNewMail := nil;
      @pfWcWriteUserPage := nil;
      @pfConfigureNavigatorSounds := nil;
      @pfRegisterNavigatorSound := nil;
      @pfPlayNavigatorSound := nil;
      @pfWcCheckClientVersion := nil;
      @pfWcGetClientVersion := nil;
      @pfWcRunClient := nil;
      @pfWcRunClientEx := nil;
      @pfWcCheckMail := nil;
      @pfWcAddUserAddress := nil;
      @pfWcGetRecipientList := nil;
      @pfWcGetGroupList := nil;
      @pfWcManageAddressBook := nil;
      @pfSetCurrentSystemDirty := nil;
      @pfGetCurrentSystemName := nil;
      @pfGetCurrentSystemRegNo := nil;
      @pfIsCustomConnector := nil;
      FreeLibrary(DllInstance);
    end;
  end;
end;

procedure SetConnectionManagerConnected(
    value: WordBool);
begin
  if @pfSetConnectionManagerConnected = nil then begin
    exit;
  end;
  pfSetConnectionManagerConnected(
    value);
end;

procedure SetConnectionManagerStarted(
    value: WordBool; 
    wnd: HWnd; 
    wMsg: Word);
begin
  if @pfSetConnectionManagerStarted = nil then begin
    exit;
  end;
  pfSetConnectionManagerStarted(
    value, 
    wnd, 
    wMsg);
end;

function CloseAllClients: Longint;
begin
  if @pfCloseAllClients = nil then begin
    CloseAllClients := 0;
    exit;
  end;
  CloseAllClients := pfCloseAllClients;
end;

function IsConnectionManagerOnline: Longint;
begin
  if @pfIsConnectionManagerOnline = nil then begin
    IsConnectionManagerOnline := 0;
    exit;
  end;
  IsConnectionManagerOnline := pfIsConnectionManagerOnline;
end;

function IsConnectionManagerStarted: Longint;
begin
  if @pfIsConnectionManagerStarted = nil then begin
    IsConnectionManagerStarted := 0;
    exit;
  end;
  IsConnectionManagerStarted := pfIsConnectionManagerStarted;
end;

function ConnectionManagerDisconnect: Longint;
begin
  if @pfConnectionManagerDisconnect = nil then begin
    ConnectionManagerDisconnect := 0;
    exit;
  end;
  ConnectionManagerDisconnect := pfConnectionManagerDisconnect;
end;

function ConnectionManagerShouldClose: Longint;
begin
  if @pfConnectionManagerShouldClose = nil then begin
    ConnectionManagerShouldClose := 0;
    exit;
  end;
  ConnectionManagerShouldClose := pfConnectionManagerShouldClose;
end;

function WildcatNavigatorGetClientCount: Longint;
begin
  if @pfWildcatNavigatorGetClientCount = nil then begin
    WildcatNavigatorGetClientCount := 0;
    exit;
  end;
  WildcatNavigatorGetClientCount := pfWildcatNavigatorGetClientCount;
end;

function WildcatNavigatorGetClientInfo(
    nIndex: Longint; 
    var ci: client_info): Longint;
begin
  if @pfWildcatNavigatorGetClientInfo = nil then begin
    WildcatNavigatorGetClientInfo := 0;
    exit;
  end;
  WildcatNavigatorGetClientInfo := pfWildcatNavigatorGetClientInfo(
    nIndex, 
     ci);
end;

function WildcatNavigatorStartup(
    hWnd: HWnd; 
    wMsg: Word): Longint;
begin
  if @pfWildcatNavigatorStartup = nil then begin
    WildcatNavigatorStartup := 0;
    exit;
  end;
  WildcatNavigatorStartup := pfWildcatNavigatorStartup(
    hWnd, 
    wMsg);
end;

function WildcatNavigatorStartupEx(
    hWnd: HWnd; 
    wMsg: Word; 
    flags: Longint): Longint;
begin
  if @pfWildcatNavigatorStartupEx = nil then begin
    WildcatNavigatorStartupEx := 0;
    exit;
  end;
  WildcatNavigatorStartupEx := pfWildcatNavigatorStartupEx(
    hWnd, 
    wMsg, 
    flags);
end;

procedure WildcatNavigatorCleanup(
    hWnd: HWnd);
begin
  if @pfWildcatNavigatorCleanup = nil then begin
    exit;
  end;
  pfWildcatNavigatorCleanup(
    hWnd);
end;

function WildcatNavigatorGetClientFlags(
    hWnd: HWnd): Longint;
begin
  if @pfWildcatNavigatorGetClientFlags = nil then begin
    WildcatNavigatorGetClientFlags := 0;
    exit;
  end;
  WildcatNavigatorGetClientFlags := pfWildcatNavigatorGetClientFlags(
    hWnd);
end;

function WildcatNavigatorSetClientFlags(
    hWnd: HWnd; 
    flags: Longint): Longint;
begin
  if @pfWildcatNavigatorSetClientFlags = nil then begin
    WildcatNavigatorSetClientFlags := 0;
    exit;
  end;
  WildcatNavigatorSetClientFlags := pfWildcatNavigatorSetClientFlags(
    hWnd, 
    flags);
end;

function WcShowTransferStatus: Longint;
begin
  if @pfWcShowTransferStatus = nil then begin
    WcShowTransferStatus := 0;
    exit;
  end;
  WcShowTransferStatus := pfWcShowTransferStatus;
end;

function WcDownloadFileDirect(
    const filename: PChar; 
    expected: Longint; 
    const downloadpath: PChar; 
    downloadAndRun: WordBool; 
    const downloadName: PChar): Longint;
begin
  if @pfWcDownloadFileDirect = nil then begin
    WcDownloadFileDirect := 0;
    exit;
  end;
  WcDownloadFileDirect := pfWcDownloadFileDirect(
     filename, 
    expected, 
     downloadpath, 
    downloadAndRun, 
     downloadName);
end;

function WcDownloadFile(
    const filename: PChar; 
    area: Word; 
    expected: Longint; 
    const downloadpath: PChar; 
    downloadAndRun: WordBool): Longint;
begin
  if @pfWcDownloadFile = nil then begin
    WcDownloadFile := 0;
    exit;
  end;
  WcDownloadFile := pfWcDownloadFile(
     filename, 
    area, 
    expected, 
     downloadpath, 
    downloadAndRun);
end;

function WcDownloadAttachment(
    const filename: PChar; 
    msgid: Longint; 
    conf: Longint; 
    const downloadPath: PChar; 
    downloadAndRun: WordBool): Longint;
begin
  if @pfWcDownloadAttachment = nil then begin
    WcDownloadAttachment := 0;
    exit;
  end;
  WcDownloadAttachment := pfWcDownloadAttachment(
     filename, 
    msgid, 
    conf, 
     downloadPath, 
    downloadAndRun);
end;

function WcUploadFile(
    const filename: PChar; 
    const filerec: TFullFileRecord): Longint;
begin
  if @pfWcUploadFile = nil then begin
    WcUploadFile := 0;
    exit;
  end;
  WcUploadFile := pfWcUploadFile(
     filename, 
     filerec);
end;

function WcUploadFileEx(
    const filename: PChar; 
    const filerec: TFullFileRecord; 
    flags: Word): Longint;
begin
  if @pfWcUploadFileEx = nil then begin
    WcUploadFileEx := 0;
    exit;
  end;
  WcUploadFileEx := pfWcUploadFileEx(
     filename, 
     filerec, 
    flags);
end;

function WcDownloadFileMultiple(
    info: Word{HGlobal}): Longint;
begin
  if @pfWcDownloadFileMultiple = nil then begin
    WcDownloadFileMultiple := 0;
    exit;
  end;
  WcDownloadFileMultiple := pfWcDownloadFileMultiple(
    info);
end;

function WcDownloadAttachmentMultiple(
    info: Word{HGlobal}): Longint;
begin
  if @pfWcDownloadAttachmentMultiple = nil then begin
    WcDownloadAttachmentMultiple := 0;
    exit;
  end;
  WcDownloadAttachmentMultiple := pfWcDownloadAttachmentMultiple(
    info);
end;

function WcUploadFileMultiple(
    info: Word{HGlobal}): Longint;
begin
  if @pfWcUploadFileMultiple = nil then begin
    WcUploadFileMultiple := 0;
    exit;
  end;
  WcUploadFileMultiple := pfWcUploadFileMultiple(
    info);
end;

function WcUploadFileExMultiple(
    info: Word{HGlobal}): Longint;
begin
  if @pfWcUploadFileExMultiple = nil then begin
    WcUploadFileExMultiple := 0;
    exit;
  end;
  WcUploadFileExMultiple := pfWcUploadFileExMultiple(
    info);
end;

function WcWriteMessage(
    const touser: TUserInfo; 
    const fromuser: TUserInfo; 
    const subject: PChar): Longint;
begin
  if @pfWcWriteMessage = nil then begin
    WcWriteMessage := 0;
    exit;
  end;
  WcWriteMessage := pfWcWriteMessage(
     touser, 
     fromuser, 
     subject);
end;

function WcReadNewMail: Longint;
begin
  if @pfWcReadNewMail = nil then begin
    WcReadNewMail := 0;
    exit;
  end;
  WcReadNewMail := pfWcReadNewMail;
end;

function WcWriteUserPage(
    const touser: PChar; 
    const fromuser: PChar; 
    const message: PChar; 
    flags: Longint): Longint;
begin
  if @pfWcWriteUserPage = nil then begin
    WcWriteUserPage := 0;
    exit;
  end;
  WcWriteUserPage := pfWcWriteUserPage(
     touser, 
     fromuser, 
     message, 
    flags);
end;

procedure ConfigureNavigatorSounds;
begin
  if @pfConfigureNavigatorSounds = nil then begin
    exit;
  end;
  pfConfigureNavigatorSounds;
end;

procedure RegisterNavigatorSound(
    const app: PChar; 
    const event: PChar; 
    const defsound: PChar);
begin
  if @pfRegisterNavigatorSound = nil then begin
    exit;
  end;
  pfRegisterNavigatorSound(
     app, 
     event, 
     defsound);
end;

procedure PlayNavigatorSound(
    const app: PChar; 
    const event: PChar);
begin
  if @pfPlayNavigatorSound = nil then begin
    exit;
  end;
  pfPlayNavigatorSound(
     app, 
     event);
end;

function WcCheckClientVersion(
    const clientname: PChar; 
    const version: PChar): Longint;
begin
  if @pfWcCheckClientVersion = nil then begin
    WcCheckClientVersion := 0;
    exit;
  end;
  WcCheckClientVersion := pfWcCheckClientVersion(
     clientname, 
     version);
end;

function WcGetClientVersion(
    clientversion: PChar; 
    const clientname: PChar; 
    maxlen: Integer): Longint;
begin
  if @pfWcGetClientVersion = nil then begin
    WcGetClientVersion := 0;
    exit;
  end;
  WcGetClientVersion := pfWcGetClientVersion(
    clientversion, 
     clientname, 
    maxlen);
end;

function WcRunClient(
    const clientname: PChar; 
    const sendinfo: WcRunClientStructure): Longint;
begin
  if @pfWcRunClient = nil then begin
    WcRunClient := 0;
    exit;
  end;
  WcRunClient := pfWcRunClient(
     clientname, 
     sendinfo);
end;

function WcRunClientEx(
    const clientname: PChar; 
    const sendinfo: WcRunClientStructure; 
    flags: Longint): Longint;
begin
  if @pfWcRunClientEx = nil then begin
    WcRunClientEx := 0;
    exit;
  end;
  WcRunClientEx := pfWcRunClientEx(
     clientname, 
     sendinfo, 
    flags);
end;

function WcCheckMail: Longint;
begin
  if @pfWcCheckMail = nil then begin
    WcCheckMail := 0;
    exit;
  end;
  WcCheckMail := pfWcCheckMail;
end;

function WcAddUserAddress(
    parent: HWnd; 
    var entry: WcAddressBookEntry): Longint;
begin
  if @pfWcAddUserAddress = nil then begin
    WcAddUserAddress := 0;
    exit;
  end;
  WcAddUserAddress := pfWcAddUserAddress(
    parent, 
     entry);
end;

function WcGetRecipientList(
    parent: HWnd; 
    const addresstype: PChar; 
    carboncopy: WordBool; 
    list: THandle): Longint;
begin
  if @pfWcGetRecipientList = nil then begin
    WcGetRecipientList := 0;
    exit;
  end;
  WcGetRecipientList := pfWcGetRecipientList(
    parent, 
     addresstype, 
    carboncopy, 
    list);
end;

function WcGetGroupList(
    const group: PChar; 
    const addresstype: PChar): THandle;
begin
  if @pfWcGetGroupList = nil then begin
    WcGetGroupList := 0;
    exit;
  end;
  WcGetGroupList := pfWcGetGroupList(
     group, 
     addresstype);
end;

function WcManageAddressBook(
    parent: HWnd): Longint;
begin
  if @pfWcManageAddressBook = nil then begin
    WcManageAddressBook := 0;
    exit;
  end;
  WcManageAddressBook := pfWcManageAddressBook(
    parent);
end;

procedure SetCurrentSystemDirty;
begin
  if @pfSetCurrentSystemDirty = nil then begin
    exit;
  end;
  pfSetCurrentSystemDirty;
end;

function GetCurrentSystemName: PChar;
begin
  if @pfGetCurrentSystemName = nil then begin
    GetCurrentSystemName := nil;
    exit;
  end;
  GetCurrentSystemName := pfGetCurrentSystemName;
end;

function GetCurrentSystemRegNo: PChar;
begin
  if @pfGetCurrentSystemRegNo = nil then begin
    GetCurrentSystemRegNo := nil;
    exit;
  end;
  GetCurrentSystemRegNo := pfGetCurrentSystemRegNo;
end;

function IsCustomConnector: Boolean;
begin
  if @pfIsCustomConnector = nil then begin
    IsCustomConnector := False;
    exit;
  end;
  IsCustomConnector := pfIsCustomConnector;
end;


end.
