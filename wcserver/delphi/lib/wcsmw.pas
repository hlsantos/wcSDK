//------------------------------------------------------------------------
// Delphi Wildcat! SDK API v6.0.451.1
// Copyright (c) 1998-2004 Santronics Software, Inc. All Rights Reserved.
//
// DO NOT EDIT THIS FILE!!!
// Automatically generated from wcsmw.h by cpp2pas.
//------------------------------------------------------------------------
{$O+,F+,I-,S-,R-}
unit wcsmw;

interface

{$IFDEF WIN32}
uses windows, wctype, wctypemw;
{$ELSE}
uses WinTypes, wctype, wctypemw;
{$ENDIF}


//!----------------------------------------------------------------
//! Group: Makewild Configuration
//! MwLogin
//! Login as the configuration client
//! password  - configuration password, used "" if none. if a
//!             password is required, you should prompt for the
//!             password.
//! returns TRUE if successful, otherwise see extended error
//!----------------------------------------------------------------

function MwLogin(const password: PChar): BOOL; stdcall; external 'wcsmw.dll';

//!----------------------------------------------------------------
//! Group: Makewild Configuration
//! MwGetMakewild
//! return the configuration structure TWildcatServerPrivateConfig
//! mw - TWildcatServerPrivateConfig
//! returns TRUE if successful, otherwise see extended error
//! see also MwUpdateMakeWild
//!----------------------------------------------------------------

function MwGetMakewild(var mw: TWildcatServerPrivateConfig): BOOL; stdcall; external 'wcsmw.dll';

//!----------------------------------------------------------------
//! Group: Makewild Configuration
//! MwUpdateMakewild
//! Save the configuration structure TWildcatServerPrivateConfig
//! mw - TWildcatServerPrivateConfig
//! returns TRUE if successful, otherwise see extended error
//! see also MwGetMakeWild
//!----------------------------------------------------------------

function MwUpdateMakewild(var mw: TWildcatServerPrivateConfig): BOOL; stdcall; external 'wcsmw.dll';

//!----------------------------------------------------------------
//! Group: Security Profile functions
//!
//! MwGetSecurityProfileCount    get number of security profiles
//! MwGetSecurityProfileNames    get a string list of security names
//! MwGetSecurityProfiles        get an array of TSecurityProfiles
//! MwAddSecurityProfile         add a security profile
//! MwUpdateSecurityProfile      update a security profile
//! MwRemoveSecurityProfile      remote a security profile
//!----------------------------------------------------------------

function MwGetSecurityProfileCount: DWORD; stdcall; external 'wcsmw.dll';
function MwGetSecurityProfileNames(index: Dword; count: Dword; profilenames: PSecurityName): Boolean; stdcall; external 'wcsmw.dll';
function MwGetSecurityProfiles(index: DWORD; count: DWORD; var profile: TSecurityProfile): BOOL; stdcall; external 'wcsmw.dll';
function MwAddSecurityProfile(const profile: TSecurityProfile; var index: DWORD): BOOL; stdcall; external 'wcsmw.dll';
function MwUpdateSecurityProfile(index: DWORD; const profile: TSecurityProfile): BOOL; stdcall; external 'wcsmw.dll';
function MwRemoveSecurityProfile(index: DWORD): BOOL; stdcall; external 'wcsmw.dll';

//!----------------------------------------------------------------
//! Group: Security Access Profile functions
//! The "Group" functions apply to the access profiles, NOT the
//! security profiles.
//!
//! MwCreateGroup                create a new group
//! MwRemoveGroup                remove a group
//! MwCloneGroup                 clone a group and all its flags
//! MwGetGroupCount              get the number of groups
//! MwGetGroupNames              get the current group names (and
//!                              indexes implicitly by position in
//!                              array)
//! MwGetObjectFlags             get the object's flags in group
//! MwGetMultipleObjectFlags     get multiple object flags in group
//! MwSetObjectFlags             sets the object's flags in a group (will
//!                              add the object to the group file if
//!                              it needs to, or remove it if flags == 0)
//! MwSetMultipleObjectFlags     set multiple object flags in group
//! MwGetObjectFlagsInGroups     get the flags for an object in each
//!                              group, indexes are relative to the
//!                              group names returned by MwGetGroupNames()
//! MwSetObjectFlagsInGroups     set the flags for an object in each group
//!----------------------------------------------------------------

function MwCreateGroup(const groupname: PChar; var index: DWORD): BOOL; stdcall; external 'wcsmw.dll';
function MwRemoveGroup(const groupname: PChar): BOOL; stdcall; external 'wcsmw.dll';
function MwCloneGroup(sourcegroupindex: DWORD; const newgroupname: PChar; var newgroupindex: DWORD): BOOL; stdcall; external 'wcsmw.dll';
function MwGetGroupCount: DWORD; stdcall; external 'wcsmw.dll';
function MwGetGroupNames(names: PSecurityName): Boolean; stdcall; external 'wcsmw.dll';
function MwGetObjectFlags(groupindex: DWORD; objectid: DWORD): DWORD; stdcall; external 'wcsmw.dll';
function MwGetMultipleObjectFlags(groupindex: DWORD; const objectid: DWORD; count: DWORD; var flags: DWORD): BOOL; stdcall; external 'wcsmw.dll';
function MwSetObjectFlags(groupindex: DWORD; objectid: DWORD; flags: DWORD): BOOL; stdcall; external 'wcsmw.dll';
function MwSetMultipleObjectFlags(groupindex: DWORD; const objectid: DWORD; const flags: DWORD; count: DWORD): BOOL; stdcall; external 'wcsmw.dll';
function MwGetObjectFlagsInGroups(objectid: DWORD; var flags: DWORD): BOOL; stdcall; external 'wcsmw.dll';
function MwSetObjectFlagsInGroups(objectid: DWORD; const flags: DWORD): BOOL; stdcall; external 'wcsmw.dll';

//!----------------------------------------------------------------
//! Group: Computers/Load Balancing
//! The "Computer" functions apply to the "Computers" setup in
//! wcconfig.exe.  This help load balance the system by distributing
//! the wconline setup of the internet servers across various
//! machines. The default is a blank computer name - index 0.
//!----------------------------------------------------------------

function MwGetComputerConfigCount: DWORD; stdcall; external 'wcsmw.dll';
function MwGetComputerConfigNames(index: Dword; count: Dword; computernames: PComputerName): Boolean; stdcall; external 'wcsmw.dll';
function MwGetComputerConfigs(index: DWORD; count: DWORD; var cconfig: TComputerConfig): BOOL; stdcall; external 'wcsmw.dll';
function MwAddComputerConfig(const ccoonfig: TComputerConfig; var index: DWORD): BOOL; stdcall; external 'wcsmw.dll';
function MwUpdateComputerConfig(index: DWORD; var cconfig: TComputerConfig): BOOL; stdcall; external 'wcsmw.dll';
function MwRemoveComputerConfig(index: DWORD): BOOL; stdcall; external 'wcsmw.dll';

//!----------------------------------------------------------------
//! Group: Mail Conference Setup
//! Mail conference setup functions
//!----------------------------------------------------------------

function MwGetShortConfDescs(conference: DWORD; count: DWORD; var cd: TShortConfDesc): BOOL; stdcall; external 'wcsmw.dll';
function MwGetConfDescs(conference: DWORD; count: DWORD; var cd: TWildcatServerPrivateConfDesc): BOOL; stdcall; external 'wcsmw.dll';
function MwSetConferenceCount(count: DWORD): BOOL; stdcall; external 'wcsmw.dll';
function MwUpdateConfDesc(conference: DWORD; var cd: TWildcatServerPrivateConfDesc): BOOL; stdcall; external 'wcsmw.dll';

function MwGetConferenceGroups(group: DWORD; count: DWORD; var fg: TConferenceGroup): BOOL; stdcall; external 'wcsmw.dll';
function MwSetConferenceGroupCount(count: DWORD): BOOL; stdcall; external 'wcsmw.dll';
function MwUpdateConferenceGroup(group: DWORD; var cg: TConferenceGroup): BOOL; stdcall; external 'wcsmw.dll';
function MwGetConferenceGroupBits(group: DWORD; bytes: DWORD; var bits: BYTE): BOOL; stdcall; external 'wcsmw.dll';
function MwSetConferenceGroupBits(group: DWORD; bytes: DWORD; const bits: BYTE): BOOL; stdcall; external 'wcsmw.dll';

//!----------------------------------------------------------------
//! Group: File Area Setup
//! File Area setup functions
//!----------------------------------------------------------------

function MwGetShortFileAreas(area: DWORD; count: DWORD; var fa: TShortFileArea): BOOL; stdcall; external 'wcsmw.dll';
function MwGetFileAreas(area: DWORD; count: DWORD; var fa: TWildcatServerPrivateFileArea): BOOL; stdcall; external 'wcsmw.dll';
function MwSetFileAreaCount(count: DWORD): BOOL; stdcall; external 'wcsmw.dll';
function MwUpdateFileArea(area: DWORD; var fa: TWildcatServerPrivateFileArea): BOOL; stdcall; external 'wcsmw.dll';

//! Group: File Area Group Setup

function MwGetFileGroups(group: DWORD; count: DWORD; var fg: TFileGroup): BOOL; stdcall; external 'wcsmw.dll';
function MwSetFileGroupCount(count: DWORD): BOOL; stdcall; external 'wcsmw.dll';
function MwUpdateFileGroup(group: DWORD; var fg: TFileGroup): BOOL; stdcall; external 'wcsmw.dll';
function MwGetFileGroupBits(group: DWORD; bytes: DWORD; var bits: BYTE): BOOL; stdcall; external 'wcsmw.dll';
function MwSetFileGroupBits(group: DWORD; bytes: DWORD; const bits: BYTE): BOOL; stdcall; external 'wcsmw.dll';

//! Group: CD Volume Setup

function MwGetFileVolumeCount: DWORD; stdcall; external 'wcsmw.dll';
function MwGetFileVolumeNames(index: Dword; count: Dword; volumenames: PVolumeName): Boolean; stdcall; external 'wcsmw.dll';
function MwGetFileVolumes(index: DWORD; count: DWORD; var fv: TWildcatServerPrivateFileVolume): BOOL; stdcall; external 'wcsmw.dll';
function MwAddFileVolume(var fv: TWildcatServerPrivateFileVolume; var index: DWORD): BOOL; stdcall; external 'wcsmw.dll';
function MwUpdateFileVolume(index: DWORD; var fv: TWildcatServerPrivateFileVolume): BOOL; stdcall; external 'wcsmw.dll';
function MwRemoveFileVolume(index: DWORD): BOOL; stdcall; external 'wcsmw.dll';

//!----------------------------------------------------------------
//! Group: Door Setup
//! Door setup functions
//!----------------------------------------------------------------

function MwGetDoorNames(index: Dword; count: Dword; doornames: PDoorName): Boolean; stdcall; external 'wcsmw.dll';
function MwGetDoors(index: DWORD; count: DWORD; var di: TDoorInfo): BOOL; stdcall; external 'wcsmw.dll';
function MwAddDoor(var di: TDoorInfo; var index: DWORD): BOOL; stdcall; external 'wcsmw.dll';
function MwUpdateDoor(index: DWORD; const di: TDoorInfo): BOOL; stdcall; external 'wcsmw.dll';
function MwRemoveDoor(index: DWORD): BOOL; stdcall; external 'wcsmw.dll';

//!----------------------------------------------------------------
//! Group: Language Prompt Files Setup
//! Language Setup functions
//!----------------------------------------------------------------

function MwGetLanguages(index: DWORD; count: DWORD; var li: TLanguageInfo): BOOL; stdcall; external 'wcsmw.dll';
function MwAddLanguage(const li: TLanguageInfo; var index: DWORD): BOOL; stdcall; external 'wcsmw.dll';
function MwUpdateLanguage(index: DWORD; const li: TLanguageInfo): BOOL; stdcall; external 'wcsmw.dll';
function MwRemoveLanguage(index: DWORD): BOOL; stdcall; external 'wcsmw.dll';

//!----------------------------------------------------------------
//! Group: Modem Profiles Setup
//! Modem Profiles setup functions
//!----------------------------------------------------------------

function MwGetModemCount: DWORD; stdcall; external 'wcsmw.dll';
function MwGetShortModemProfiles(index: DWORD; count: DWORD; var mp: TShortModemProfile): BOOL; stdcall; external 'wcsmw.dll';
function MwGetModemProfile(index: DWORD; var mp: TModemProfile): BOOL; stdcall; external 'wcsmw.dll';
function MwAddModemProfile(const mp: TModemProfile; var index: DWORD): BOOL; stdcall; external 'wcsmw.dll';
function MwUpdateModemProfile(index: DWORD; const mp: TModemProfile): BOOL; stdcall; external 'wcsmw.dll';
function MwRemoveModemProfile(index: DWORD): BOOL; stdcall; external 'wcsmw.dll';

//!----------------------------------------------------------------
//! Group: Node Configuration functions.
//!----------------------------------------------------------------

function MwGetNodeConfigCount: DWORD; stdcall; external 'wcsmw.dll';
function MwGetNodeConfigs(node: DWORD; count: DWORD; var nc: TNodeConfig): BOOL; stdcall; external 'wcsmw.dll';
function MwUpdateNodeConfig(node: DWORD; const nc: TNodeConfig): BOOL; stdcall; external 'wcsmw.dll';

//!----------------------------------------------------------------
//! Group: Miscellaneous
//! Check for the existence of server path with
//! optional create option
//!----------------------------------------------------------------

function MwCheckPath(const path: PChar; create: BOOL): BOOL; stdcall; external 'wcsmw.dll';

implementation

end.
