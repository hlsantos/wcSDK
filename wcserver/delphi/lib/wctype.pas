//------------------------------------------------------------------------
// Delphi Wildcat! SDK API v6.0.451.1
// Copyright (c) 1998-2004 Santronics Software, Inc. All Rights Reserved.
//
// DO NOT EDIT THIS FILE!!!
// Automatically generated from wctype.h by cpp2pas.
//------------------------------------------------------------------------
{$O+,F+,I-,S-,R-}
unit wctype;

interface

{$IFDEF WIN32}
uses windows;
{$ELSE}
uses WinTypes;
{$ENDIF}


const MAX_PATH                              = 260;

//! Group: Client Structures

const WILDCAT_FRAMEWORK_VERSION             = 1;
//!define WILDCAT_MARKETING_VERSION        "5.7"
const WILDCAT_MKTG_VERSION                  = 6;
const WILDCAT_COMPONENT_ICP                 =  $00000001;
const WILDCAT_COMPONENT_SSL                 =  $00000002;

//! NOTE:
//! - long file name support was implemented in v5.5
//!   v5.5 - file database only

const SIZE_SHORT_FILE_NAME                  = 16;
const SIZE_LONG_FILE_NAME                   = MAX_PATH;

const SIZE_VOLUME_NAME                      = 16;
const SIZE_CALLTYPE                         = 32;
const SIZE_COMPUTER_NAME                    = 16;
const SIZE_CONFERENCE_NAME                  = 60;
const SIZE_CONFERENCEGROUP_NAME             = 32;
const SIZE_DOMAIN_NAME                      = 64;
const SIZE_DOOR_NAME                        = 40;
const SIZE_ENCODED_PASSWORD                 = 20;
const SIZE_EXTENSION                        = 4;
const SIZE_FILEAREA_NAME                    = 32;
const SIZE_FILEGROUP_NAME                   = 32;
const SIZE_LANGUAGE_NAME                    = 12;
const SIZE_MENU_DESCRIPTION                 = 40;
const SIZE_MODEM_NAME                       = 32;
const SIZE_PASSWORD                         = 32;
const SIZE_SECURITY_NAME                    = 24;
const SIZE_SERVICE_NAME                     = 64;
const SIZE_USER_NAME                        = 72;
const SIZE_MAKEWILD_BBSNAME                 = 52;
const SIZE_MAKEWILD_CITY                    = 32;
const SIZE_MAKEWILD_PHONE                   = 28;
const SIZE_MAKEWILD_FIRSTCALL               = 28;
const SIZE_MAKEWILD_PACKETID                = 12;
const SIZE_MAKEWILD_REGSTRING               = 8;
const MAX_USER_NAME                         = 28;

//!--------------------------------------------------------------------
//! Access Profiles Class Object identifiers (COID).
//! COIDS are used to identify a group/class of objects.
//!--------------------------------------------------------------------

const MASK_OBJECTCLASS                      =  $FF000000;
const OBJECTCLASS_RIGHTS                    =  $01000000;
const OBJECTCLASS_CONFERENCE                =  $02000000;
const OBJECTCLASS_CONFERENCEGROUP           =  $03000000;
const OBJECTCLASS_FILEAREA                  =  $04000000;
const OBJECTCLASS_FILEGROUP                 =  $05000000;
const OBJECTCLASS_DOOR                      =  $06000000;
const OBJECTCLASS_MENU                      =  $07000000;
const OBJECTCLASS_CODE                      =  $08000000;
const OBJECTCLASS_CLIENT                    =  $09000000;
const OBJECTCLASS_SAPPHIRE_QUERY            =  $0a000000;
const OBJECTCLASS_CHAT_CHANNEL              =  $0b000000;
const OBJECTCLASS_RADIUS_CLIENT             =  $0c000000;
const OBJECTCLASS_DOMAINS                   =  $0d000000;

//!--------------------------------------------------------------------
//! Access Profiles Object identifiers (OID).
//! Use with GetObjectFlags() during user sessions to determine if
//! logged in user has access to specific functionalities identified
//! by the OIDs
//!--------------------------------------------------------------------

const OBJECTID_BULLETINS_OPTIONAL           = OBJECTCLASS_RIGHTS + 1;
const OBJECTID_CHANGE_PHONE                 = OBJECTCLASS_RIGHTS + 2;
const OBJECTID_CHANGE_BIRTHDATE             = OBJECTCLASS_RIGHTS + 4;
const OBJECTID_QWK_ALLOW_BULLETINS          = OBJECTCLASS_RIGHTS + 5;
const OBJECTID_QWK_ALLOW_NEWS               = OBJECTCLASS_RIGHTS + 6;
const OBJECTID_QWK_ALLOW_FILES              = OBJECTCLASS_RIGHTS + 7;
const OBJECTID_QWK_DETAIL_DOWNLOAD          = OBJECTCLASS_RIGHTS + 8;
const OBJECTID_QWK_CHECK_DUPES              = OBJECTCLASS_RIGHTS + 9;
const OBJECTID_QWK_SAVE_PACKETS             = OBJECTCLASS_RIGHTS + 10;
const OBJECTID_MASTER_SYSOP                 = OBJECTCLASS_RIGHTS + 11;
const OBJECTID_RATIO_ACTION                 = OBJECTCLASS_RIGHTS + 12;
const OBJECTID_ALLOW_FAST_LOGIN             = OBJECTCLASS_RIGHTS + 13;
const OBJECTID_ALLOW_OVERWRITE_FILES        = OBJECTCLASS_RIGHTS + 14;
const OBJECTID_SHOW_PASSWORD_FILES          = OBJECTCLASS_RIGHTS + 15;
const OBJECTID_ALLOW_OFFLINE_FILE_REQUESTS  = OBJECTCLASS_RIGHTS + 16;
const OBJECTID_ALLOW_UPLOAD_OVER_TIME       = OBJECTCLASS_RIGHTS + 17;
const OBJECTID_ALLOW_DOWNLOAD_OVER_TIME     = OBJECTCLASS_RIGHTS + 18;
const OBJECTID_ALLOW_UPLOADER_MODIFY_FILE   = OBJECTCLASS_RIGHTS + 20;
const OBJECTID_QWK_NETSTATUS                = OBJECTCLASS_RIGHTS + 26;
const OBJECTID_SYSOP_READ_PRIVATE_MAIL      = OBJECTCLASS_RIGHTS + 27;
const OBJECTID_ALLOW_INTERNET_EMAIL         = OBJECTCLASS_RIGHTS + 28;
const OBJECTID_ALLOW_ANY_TELNET             = OBJECTCLASS_RIGHTS + 29;
const OBJECTID_ALLOW_ANY_FTP                = OBJECTCLASS_RIGHTS + 30;
const OBJECTID_ALLOW_HTTP_PROXY             = OBJECTCLASS_RIGHTS + 31;
const OBJECTID_ALLOW_ALL_IP                 = OBJECTCLASS_RIGHTS + 32;
const OBJECTID_ALLOW_DEFAULT_IP             = OBJECTCLASS_RIGHTS + 33;
const OBJECTID_ALLOW_PPP                    = OBJECTCLASS_RIGHTS + 34;
const OBJECTID_IGNORE_TIME_ONLINE           = OBJECTCLASS_RIGHTS + 35;
const OBJECTID_IGNORE_IDLE_TIME             = OBJECTCLASS_RIGHTS + 36;
const OBJECTID_ALLOW_SMTP_AUTH              = OBJECTCLASS_RIGHTS + 37;
const OBJECTID_ALLOW_NNTP_ACCESS            = OBJECTCLASS_RIGHTS + 38;
const OBJECTID_USERBIN_ACCESS               = OBJECTCLASS_RIGHTS + 39;
const OBJECTID_ALLOW_FTP_ACCESS             = OBJECTCLASS_RIGHTS + 40;
const OBJECTID_ALLOW_WEB_ACCESS             = OBJECTCLASS_RIGHTS + 41;
const OBJECTID_ALLOW_TELNET_ACCESS          = OBJECTCLASS_RIGHTS + 42;
const OBJECTID_CHANGE_EMAILADDRESS          = OBJECTCLASS_RIGHTS + 43;
const OBJECTID_CHANGE_SMTPFORWARD           = OBJECTCLASS_RIGHTS + 44;
const OBJECTID_PROTOCOL_ACCESS              = OBJECTCLASS_RIGHTS +  $00010000;  // plus protocol number
const OBJECTID_NODE_ACCESS                  = OBJECTCLASS_RIGHTS +  $00020000;  // plus node number

const OBJECTFLAGS_CONFERENCE_JOIN           =  $00000001;
const OBJECTFLAGS_CONFERENCE_READ           =  $00000002;
const OBJECTFLAGS_CONFERENCE_WRITE          =  $00000004;
const OBJECTFLAGS_CONFERENCE_SYSOP          =  $00000008;

const OBJECTFLAGS_FILEAREA_LIST             =  $00000001;
const OBJECTFLAGS_FILEAREA_DOWNLOAD         =  $00000002;
const OBJECTFLAGS_FILEAREA_UPLOAD           =  $00000004;
const OBJECTFLAGS_FILEAREA_SYSOP            =  $00000008;

//!
//! MessageSearch() search attributes
//!

const MSF_FORWARD                           =  $00000001;
const MSF_FROM                              =  $00000002;
const MSF_TO                                =  $00000004;
const MSF_SUBJECT                           =  $00000008;
const MSF_BODY                              =  $00000010;

//!
//! wcBASIC Telnet connection options
//!

const CONNECT_RAW                           = 0;
const CONNECT_TELNET_ASCII                  = 1;
const CONNECT_TELNET_7BIT                   = 2;
const CONNECT_TELNET_8BIT                   = 3;

//!
//! User Database Function Keys
//!

const UserIdKey                             = 0;
const UserNameKey                           = 1;
const UserLastNameKey                       = 2;
const UserSecurityKey                       = 3;

//!
//! Files Database Function Keys
//!

const FileNameAreaKey                       = 0;
const FileAreaNameKey                       = 1;
const FileAreaDateKey                       = 2;
const FileUploaderKey                       = 3;
const FileDateAreaKey                       = 4;

//!
//! Channel message structure for Callbacks
//!

const CHANNEL_MESSAGE_HEADER_SIZE           = 12;
const MAX_CHANNEL_MESSAGE_SIZE              = 500;

type TChannelMessage = record
  Channel : DWORD;
  SenderId : DWORD;
  UserData : WORD;
  DataSize : WORD;
  Data : array[0..MAX_CHANNEL_MESSAGE_SIZE-1] of BYTE;
end;

//!
//! Data structure for Paging Channel Events
//! passed via TChannelMessage.Data field
//!

type TPageMessage = record
  From : array[0..28-1] of char;
  message : array[0..3-1, 0..80-1] of char;
  InviteToChat : BOOL;
end;

//!
//! Data structure for Chat Channel Events
//! passed via TChannelMessage.Data field
//!

type TChatMessage = record
  From : array[0..28-1] of char;
  Text : array[0..256-1] of char;
  Whisper : BYTE;
end;

type TObjectName = record
  Status : DWORD;
  ObjectId : DWORD;
  Number : DWORD;
  Name : array[0..MAX_PATH-1] of char;
end;

//!
//! System Operation Type
//!

const saOpen                     = 0;  // Open, accounts created
const saClosed                   = 1;  // Closed, accounts must exist
const saClosedQuestionnaire      = 2;  // Closed, run questionaire
const saClosedValidation         = 3;  // Closed, non-validated accounts Created

const dusNone                    = 0;
const dusAsk                     = 1;
const dusAllow                   = 2;

const mhcUpperCase               = 0;
const mhcLowerCase               = 1;
const mhcAsIs                    = 2;

//!
//! TMakeWild Structure (Main Configuration File)
//! See GetMakewild() function
//!

type TWildcatTimeouts = record
  dwVersion : WORD;
  dwRevision : WORD;
  Web : DWORD;
  WebQues : DWORD;
  Telnet : DWORD;
  TelnetLogin : DWORD;
  Ftp : DWORD;
  wcPPP : DWORD;
  wcNAV : DWORD;
  Reserved : array[0..92-1] of char;
end;

//!
//! LogPeriod options
//!

const wclogNone                  = 0;
const wclogHourly                = 1;
const wclogDaily                 = 2;
const wclogWeekly                = 3;
const wclogMonthly               = 4;
const wclogUnlimitedSize         = 5;
const wclogMaxSize               = 6;

type TWildcatLogOptions = record
  EnableSessionTrace : BOOL;
  LogPeriod : DWORD;
  dwMaxSize : DWORD;
  dwVerbosity : DWORD;
  Reserved : array[0..16-1] of BYTE;
end;

type TWildcatHttpd = record
  dwVersion : WORD;
  dwRevision : WORD;
  _CommonLogFile : BOOL;
  _DeutschIVW : BOOL;
  LogOptions : TWildcatLogOptions;
  dwOptions : DWORD;
  MaximumBandWidth : DWORD;
  SendBufferSize1K : DWORD;
  RcvdBufferSize1K : DWORD;
  TrackPerformance : BOOL;
  Reserved : array[0..48-1] of char;
end;

type TWildcatSMTP = record
  dwVersion : WORD;
  dwRevision : WORD;
  port : DWORD;
  sendthreads : WORD;
  acceptthreads : WORD;
  dwOptions : DWORD;
  acceptonly : BOOL;
  retries : DWORD;
  retrywait : DWORD;
  smarthost : array[0..52-1] of char;
  sizelimit : DWORD;
  localonly : BOOL;
  MAPSRBL : BOOL;
  MAPSRBLServer : array[0..52-1] of char;
  ESMTP : BOOL;
  reqauth : BOOL;
  VRFY : BOOL;
  AllowRelay : BOOL;
  CheckRCPT : BOOL;
  EnableBadFilter : BOOL;
  RequireMX : BOOL;
  RequireHostMatch : BOOL;
end;

type TWildcatNNTP = record
  dwVersion : WORD;
  dwRevision : WORD;
  dwPort : DWORD;
  dwOptions : DWORD;
  MaxCrossPost : DWORD;
  LogOptions : TWildcatLogOptions;
  Reserved : array[0..80-1] of char;
end;

type TWildcatPOP3 = record
  dwVersion : WORD;
  dwRevision : WORD;
  EnablePopBeforeSmtp : BOOL;
  dwPopBeforeSmtpTimeout : DWORD;
  dwOptions : DWORD;
  LogOptions : TWildcatLogOptions;
  MaximumBandWidth : DWORD;
  SendBufferSize1K : DWORD;
  RcvdBufferSize1K : DWORD;
  TrackPerformance : BOOL;
  Reserved : array[0..64-1] of char;
end;

type TWildcatTelnet = record
  dwVersion : WORD;
  dwRevision : WORD;
  dwOptions : DWORD;
  LogOptions : TWildcatLogOptions;
  MaximumBandWidth : DWORD;
  SendBufferSize1K : DWORD;
  RcvdBufferSize1K : DWORD;
  TrackPerformance : BOOL;
  Reserved : array[0..72-1] of char;
end;

const listUnixFormat             = 0;
const listMSDOSFormat            = 1;

type TWildcatFTP = record
  dwVersion : WORD;
  dwRevision : WORD;
  AllowAnonymous : BOOL;
  ShowFileGroups : BOOL;
  UseUnderScore : BOOL;
  UseSingleAreaChange : BOOL;
  MaxAnonymousConnects : DWORD;
  LogOptions : TWildcatLogOptions;
  ListFormat : DWORD;
  dwOptions : DWORD;
  MaximumBandWidth : DWORD;
  SendBufferSize1K : DWORD;
  RcvdBufferSize1K : DWORD;
  TrackPerformance : BOOL;
  Reserved : array[0..48-1] of char;
end;

type TMakewild = record
  Version : DWORD;
  BBSName : array[0..SIZE_MAKEWILD_BBSNAME-1] of char;
  SysopName : array[0..MAX_USER_NAME-1] of char;
  City : array[0..SIZE_MAKEWILD_CITY-1] of char;
  Phone : array[0..SIZE_MAKEWILD_PHONE-1] of char;
  FirstCall : array[0..SIZE_MAKEWILD_FIRSTCALL-1] of char;
  PacketId : array[0..SIZE_MAKEWILD_PACKETID-1] of char;
  RegString : array[0..SIZE_MAKEWILD_REGSTRING-1] of char;
  SystemAccess : DWORD;
  MaxLoginAttempts : DWORD;
  FreeFormPhone : BOOL;
  HideAnonFtpPassword : BOOL;
  LogonLanguagePrompt : BOOL;
  Assume8N1 : BOOL;
  LoginAskLocation : BOOL;
  NewUserSecurity : array[0..SIZE_SECURITY_NAME-1] of char;
  DefaultExt : array[0..SIZE_EXTENSION-1] of char;
  ThumbnailFile : array[0..SIZE_SHORT_FILE_NAME-1] of char;
  OldDoorPath : array[0..MAX_PATH-1] of char;
  _EnableHttpProxy : BOOL;
  Reserved : array[0..128-1] of char;
  TelnetConfig : TWildcatTelnet;
  FTPConfig : TWildcatFTP;
  POP3Config : TWildcatPOP3;
  MAILLogOptions : TWildcatLogOptions;
  Reserved2 : array[0..32-1] of char;
  Reserved1 : array[0..32-1] of char;
  SMTPLogOptions : TWildcatLogOptions;
  NNTPConfig : TWildcatNNTP;
  AllowLogonEmail : BOOL;
  CaseSensitivePasswords : BOOL;
  MsgHeaderCaseMode : DWORD;
  SpamAllowAuth : BOOL;
  SMTPConfig : TWildcatSMTP;
  HttpdConfig : TWildcatHttpd;
  Timeouts : TWildcatTimeouts;
  DefaultColors : array[0..28-1] of BYTE;
  ExcludeBulletins : array[0..40-1] of DWORD;
  InstalledComponents : DWORD;
  _ResolveHostnames : BOOL;
  BuildDate : array[0..16-1] of char;
  DomainName : array[0..SIZE_DOMAIN_NAME-1] of char;
  WindowsCharset : BOOL;
  LogonUserNameOnly : BOOL;
end;

type TWildcatComputerIpPort = record
  dwPort : DWORD;
  dwIpAddress : DWORD;
end;

type TComputerConfig = record
  Name : array[0..SIZE_COMPUTER_NAME-1] of char;
  DoorPath : array[0..MAX_PATH-1] of char;
  CgiPath : array[0..MAX_PATH-1] of char;
  HttpPort : DWORD;
  FtpPort : DWORD;
  WWWHostname : array[0..80-1] of char;
  Servers : DWORD;
  HttpProxyPort : DWORD;
  dwVersion : WORD;
  dwRevision : WORD;
  ipportHttp : TWildcatComputerIpPort;
  ipportFtp : TWildcatComputerIpPort;
  ipportPop3 : TWildcatComputerIpPort;
  ipportTelnet : TWildcatComputerIpPort;
  ipportSmtp : TWildcatComputerIpPort;
  ipportNntp : TWildcatComputerIpPort;
  Reserved : array[0..340-1] of BYTE;
end;

const pNone                      = 0;
const pAscii                     = 1;
const pXmodem                    = 2;
const pXmodemCRC                 = 3;
const pXmodem1K                  = 4;
const pXmodem1KG                 = 5;
const pYmodem                    = 6;
const pYmodemG                   = 7;
const pKermit                    = 8;
const pZmodem                    = 9;
const NumProtocols               = 10;

const fiaAllow                   = 0;
const fiaLogoff                  = 1;
const fiaLockout                 = 2;

const ipfilterDeny               = 0;
const ipfilterAllow              = 1;
const ipfilterNone               = 2;

//!
//! TWildcatPOP3.dwOptions Bit Flags
//!

const pop3MarkRcvd                          =  $0001;  //! Mark downloads as received
const pop3HonorRR                           =  $0002;  //! Honor Return Request
const pop3ResolveHost                       =  $0020;  //! 450.9b3 resolve host name

//!
//! TWildcatSMTP.dwOptions Bit Flags
//!

const smtpBit0                              =  $0001;  //! ignore this bit
const smtpRcvdBin                           =  $0002;  //! Enable Receiver Bin
const smtpNoMXOnce                          =  $0004;  //! Enable RFC821 No MX try once rule
const smtpIpFilter                          =  $0008;  //! Enable IP Filter
const smtpIncMXTries                        =  $0010;  //! MXs included in total attempts
const smtpResolveHost                       =  $0020;  //! 450.9b3 resolve host name
const smtpDisableETRN                       =  $0040;  //! 450.9b13

//!
//! TWildcatFTP.dwOptions Bit Flags
//!

const ftpBit0                               =  $0001;  //! ignore this bit
const ftpUnixFileAge                        =  $0002;  //! Use Unix-style File Age Range
const ftpUseFtpLimit                        =  $0004;  //! Use Security Profile Limits
const ftpCheckForDIZ                        =  $0008;  //! Check for DIZ in zip uploads (450.8)
const ftpResolveHost                        =  $0020;  //! 450.9b3 resolve host name

//!
//! Password Bit Options for Security Profile and User Record
//!

const pwdChangeForce                        =  $0001;  // Force change at next logon
const pwdChangeDisallow                     =  $0002;  // Do not allow password change
const pwdChangeExpire                       =  $0004;  // Force Change when pwd expires
const pwdExpireLockout                      =  $0008;  // Lockout account when pwd expires

//!
//! TWildcatNNTP.dwOptions Bit Flags
//!

const nntpAllowAnony                        =  $0001;  //! Allow Anonymous
const nntpResolveHost                       =  $0020;  //! resolve host name

//!
//! TWildcatHttpd.dwOptions Bit Flags
//!

const httpEnableProxy                       =  $0001;  //! Enable http proxy
const httpCommonLogFile                     =  $0002;  //! Enable Common Log File
const httpDeutschIVW                        =  $0004;  //! Enable DeutschIVW
const httpResolveHost                       =  $0020;  //! resolve host name

//!
//! TWildcatTelnet.dwOptions Bit Flags
//!

const telnetEnableRLogin                    =  $0001;  //! Enable rlogin
const telnetResolveHost                     =  $0020;  //! resolve host name

//!
//! Structure and constants used for User's Logon Hours
//! Profile Data
//!

type TLogonHours = record
  day : array[0..7-1] of DWORD;
end;

const lh12am                                =  $00000001;
const lh1am                                 =  $00000002;
const lh2am                                 =  $00000004;
const lh3am                                 =  $00000008;
const lh4am                                 =  $00000010;
const lh5am                                 =  $00000020;
const lh6am                                 =  $00000040;
const lh7am                                 =  $00000080;
const lh8am                                 =  $00000100;
const lh9am                                 =  $00000200;
const lh10am                                =  $00000400;
const lh11am                                =  $00000800;
const lh12pm                                =  $00001000;
const lh1pm                                 =  $00002000;
const lh2pm                                 =  $00004000;
const lh3pm                                 =  $00008000;
const lh4pm                                 =  $00010000;
const lh5pm                                 =  $00020000;
const lh6pm                                 =  $00040000;
const lh7pm                                 =  $00080000;
const lh8pm                                 =  $00100000;
const lh9pm                                 =  $00200000;
const lh10pm                                =  $00400000;
const lh11pm                                =  $00800000;
const lhAllHours                            =  $00FFFFFF;
const lhSun                                 =  $01;
const lhMon                                 =  $02;
const lhTue                                 =  $04;
const lhWed                                 =  $08;
const lhThu                                 =  $10;
const lhFri                                 =  $20;
const lhSat                                 =  $40;
const lhAllDays                             =  $7F;
const lhStartofWeek                         = lhSun;  // based on Win32 Sun = 0
const lhEndofWeek                           = lhSat;

type TSecurityProfile = record
  Name : array[0..SIZE_SECURITY_NAME-1] of char;
  ExpiredName : array[0..SIZE_SECURITY_NAME-1] of char;
  DisplayFileName : array[0..SIZE_SHORT_FILE_NAME-1] of char;
  DoorSysProfileName : array[0..SIZE_SECURITY_NAME-1] of char;
  MenuDisplaySet : array[0..SIZE_SHORT_FILE_NAME-1] of char;
  DailyTimeLimit : DWORD;
  PerCallTimeLimit : DWORD;
  VerifyPhoneInterval : DWORD;
  VerifyBirthdateInterval : DWORD;
  FailedInfoAction : DWORD;
  MaxDownloadCountPerDay : DWORD;
  DownloadRatioLimit : DWORD;
  MaxDownloadKbytesPerDay : DWORD;
  DownloadKbytesRatioLimit : DWORD;
  UploadTimeCredit : DWORD;
  ExpireDays : DWORD;
  PasswordOptions : WORD;
  PasswordExpireDays : WORD;
  FtpSpaceKbytes : DWORD;
  EmailDomainName : array[0..SIZE_DOMAIN_NAME-1] of char;
  MaximumLogons : DWORD;
  RestrictedHours : BOOL;
  LogonHours : TLogonHours;
end;

const SIZE_CONFERENCE_ECHOTAG               = 64;

const mtNormalPublicPrivate      = 0;
const mtNormalPublic             = 1;
const mtNormalPrivate            = 2;
const mtFidoNetmail              = 3;
const mtEmailOnly                = 4;
const mtUsenetNewsgroup          = 5;
const mtUsenetNewsgroupModerated  = 6;
const mtInternetMailingList      = 7;

const vnYes                      = 0;
const vnNo                       = 1;
const vnPrompt                   = 2;

//!
//! 449.5
//! The following maXXXXXXXXX bit flags are used in the
//! TConfDesc.Options field.
//!

const maAllowMailSnooping                   =  $00000001;  // non-sysop can snoop mail
const maPreserveMime                        =  $00000002;  // Conference raw storage

//!
//! 449.5
//! Option for TConfDesc.AuthorType field. This will define the
//! conference option for how the From field will be defined when
//! a message is created.
//!

const authorDefaultName          = 0;  // default logic,
const authorForceUserName        = 1;  // force the user name
const authorForceAliasName       = 2;  // force the user's alias (profile string)
const authorAllowBoth            = 3;  // allow either the user or alias
const authorAnonymousName        = 4;  // anonymous from name (any name allowed)

type TConfDesc = record
  ObjectId : DWORD;
  Number : DWORD;
  Name : array[0..SIZE_CONFERENCE_NAME-1] of char;
  Reserved1 : array[0..16-1] of char;
  ConferenceSysop : array[0..MAX_USER_NAME-1] of char;
  EchoTag : array[0..SIZE_CONFERENCE_ECHOTAG-1] of char;
  ReplyToAddress : array[0..SIZE_USER_NAME-1] of char;
  Distribution : array[0..SIZE_USER_NAME-1] of char;
  MailType : DWORD;
  PromptToKillMsg : BOOL;
  PromptToKillAttach : BOOL;
  AllowHighAscii : BOOL;
  AllowCarbon : BOOL;
  AllowReturnReceipt : BOOL;
  LongHeaderFormat : BOOL;
  AllowAttach : BOOL;
  ShowCtrlLines : BOOL;
  ValidateNames : DWORD;
  DefaultFileGroup : DWORD;
  MaxMessages : DWORD;
  DaysToKeepReceivedMail : DWORD;
  DaysToKeepPublicMail : DWORD;
  RenumberThreshold : DWORD;
  DaysToKeepExternalMail : DWORD;
  DeleteSMTPDelivered : BOOL;
  PublishAsLocalNewsGroup : BOOL;
  Options : DWORD;
  AuthorType : DWORD;
  UnixCreationTime : DWORD;
  Reserved : array[0..6-1] of BYTE;
  DefaultFromAddress : array[0..SIZE_USER_NAME-1] of char;
  wVersion : WORD;
end;

type TShortConfDesc = record
  ObjectId : DWORD;
  Name : array[0..SIZE_CONFERENCE_NAME-1] of char;
  MailType : DWORD;
end;

type TConferenceGroup = record
  ObjectId : DWORD;
  Number : DWORD;
  Name : array[0..SIZE_CONFERENCEGROUP_NAME-1] of char;
  Reserved : array[0..24-1] of BYTE;
end;

//!
//! 449.5
//! TFileArea.Options attributes
//!

const faIsVolume                            =  $00000001;  // Readonly: Set by server for GetFileArea()
const faAllowPrivateFiles                   =  $00000002;  // Allow files with PrivateUserId != 0
const faAllowFolderWatch                    =  $00000004;  // 450.7, Watch physical folders (see wcfwatch)

type TFileArea = record
  ObjectId : DWORD;
  Number : DWORD;
  Name : array[0..SIZE_FILEAREA_NAME-1] of char;
  ExcludeFromNewFiles : BOOL;
  PromptForPasswordProtect : BOOL;
  FtpDirectoryName : array[0..SIZE_FILEAREA_NAME-1] of char;
  Options : DWORD;
end;

type TShortFileArea = record
  ObjectId : DWORD;
  Name : array[0..SIZE_FILEAREA_NAME-1] of char;
end;

type TFileGroup = record
  ObjectId : DWORD;
  Number : DWORD;
  Name : array[0..SIZE_FILEGROUP_NAME-1] of char;
  Reserved : array[0..24-1] of BYTE;
end;

const dtGeneric16                = 0;
const dtDoor32                   = 1;
const dtDoorway                  = 2;

type TDoorInfo = record
  ObjectId : DWORD;
  Name : array[0..SIZE_DOOR_NAME-1] of char;
  Batch : array[0..SIZE_SHORT_FILE_NAME-1] of char;
  Display : array[0..SIZE_SHORT_FILE_NAME-1] of char;
  DoorMenuIndex : DWORD;
  MultiUser : BOOL;
  SmallDoorSys : BOOL;
  DoorType : DWORD;
  Reserved : array[0..36-1] of BYTE;
end;

const SIZE_LANGUAGE_DESCRIPTION             = 72;
const MAX_LANGUAGE_SUBCOMMAND_CHARS         = 100;

const LSC_YES                               = 0;
const LSC_NO                                = 1;

type TLanguageInfo = record
  Name : array[0..SIZE_LANGUAGE_NAME-1] of char;
  Description : array[0..SIZE_LANGUAGE_DESCRIPTION-1] of char;
  SubcommandChars : array[0..MAX_LANGUAGE_SUBCOMMAND_CHARS-1] of char;
  Reserved : array[0..72-1] of BYTE;
end;

const SIZE_MODEM_STRING                     = 64;

const aRing                      = 0;
const aResult                    = 1;
const aAutoAnswer                = 2;

type TShortModemProfile = record
  UserDefined : BOOL;
  Name : array[0..SIZE_MODEM_NAME-1] of char;
end;

type TModemProfile = record
  Version : DWORD;
  UserDefined : BOOL;
  Name : array[0..SIZE_MODEM_NAME-1] of char;
  InitBaud : DWORD;
  LockDTE : BOOL;
  HardwareFlow : BOOL;
  ExitOffHook : BOOL;
  CarrierDelay : DWORD;
  RingDelay : DWORD;
  DropDtrDelay : DWORD;
  PrelogDelay : DWORD;
  ResultDelay : DWORD;
  ResetDelay : DWORD;
  AnswerMethod : DWORD;
  EnableCallerId : DWORD;
  ResetCommand : array[0..SIZE_MODEM_STRING-1] of char;
  AnswerCommand : array[0..SIZE_MODEM_STRING-1] of char;
  Reserved1 : array[0..SIZE_MODEM_STRING-1] of char;
  OffHook : array[0..SIZE_MODEM_STRING-1] of char;
  RingResult : array[0..SIZE_MODEM_STRING-1] of char;
  ConnectResult : array[0..SIZE_MODEM_STRING-1] of char;
  Reserved2 : array[0..SIZE_MODEM_STRING-1] of char;
  ErrorFreeResult : array[0..SIZE_MODEM_STRING-1] of char;
  ExtraBaudResults : array[0..10-1, 0..SIZE_MODEM_STRING-1] of char;
  ExtraBaudResultNumbers : array[0..10-1] of DWORD;
  Reserved3 : array[0..SIZE_MODEM_STRING-1] of char;
  InitCommand : array[0..SIZE_MODEM_STRING-1] of char;
  Reserved4 : array[0..SIZE_MODEM_STRING-1] of char;
  Reserved5 : array[0..3-1, 0..SIZE_MODEM_STRING-1] of char;
  Reserved6 : array[0..256-1] of char;
  Reserved : array[0..128-1] of BYTE;
end;

const CALLTYPE_LOCAL                        =  $00000001;  // Local mode
const CALLTYPE_DIALUP                       =  $00000002;  // Ansi/TTY Direct Dialup Client
const CALLTYPE_TELNET                       =  $00000004;  // Ansi/TTY Telnet Client
const CALLTYPE_FTP                          =  $00000008;  // FTP client
const CALLTYPE_HTTP                         =  $00000010;  // Web client
const CALLTYPE_FRONTEND                     =  $00000020;  // Connection Hook
const CALLTYPE_POP3                         =  $00000040;  // POP3 client
const CALLTYPE_SMTP                         =  $00000080;  // !!! SMTP client
const CALLTYPE_PPP                          =  $00000100;  // !!! PPP client
const CALLTYPE_RADIUS                       =  $00000200;  // !!! RADIUS client
const CALLTYPE_NNTP                         =  $00000400;  // !!! NNTP client
const CALLTYPE_HTTPS                        =  $00000800;  // !!! HTTPS client (v5.5.450.3)

const SIZE_NODECONFIG_COMPUTER              = 16;
const SIZE_NODECONFIG_PORTNAME              = 16;

type TNodeConfig = record
  CallTypesAllowed : DWORD;
  ModemName : array[0..SIZE_MODEM_NAME-1] of char;
  Computer : array[0..SIZE_NODECONFIG_COMPUTER-1] of char;
  Port : array[0..SIZE_NODECONFIG_PORTNAME-1] of char;
  PermanentLineID : DWORD;
  VirtualDoorPort : array[0..8-1] of char;
  Reserved : array[0..48-1] of BYTE;
end;

const SIZE_SERVERSTATE_PORT                 = 80;

const SERVERSTATE_OFFLINE                   = 0;  // remove server from list
const SERVERSTATE_DOWN                      = 1;  // red
const SERVERSTATE_REFUSE                    = 2;  // yellow
const SERVERSTATE_UP                        = 3;  // green

type TServerState = record
  OwnerId : DWORD;
  Computer : array[0..SIZE_NODECONFIG_COMPUTER-1] of char;
  Port : array[0..SIZE_SERVERSTATE_PORT-1] of char;
  State : DWORD;
end;

const MENU_TOPLEVEL                         =  $00000002;

const MAX_MENU_ITEMS                        = 40;
const SIZE_MENUITEM_SELECTION               = 16;
const SIZE_MENUITEM_DESCRIPTION             = 32;
const SIZE_MENUITEM_COMMAND                 = 48;

type TwcMenuItem = record
  Selection : array[0..SIZE_MENUITEM_SELECTION-1] of char;
  Description : array[0..SIZE_MENUITEM_DESCRIPTION-1] of char;
  Command : array[0..SIZE_MENUITEM_COMMAND-1] of char;
  Parameters : array[0..SIZE_MENUITEM_COMMAND-1] of char;
  Reserved : array[0..4-1] of BYTE;
end;

type TMenu = record
  ObjectId : DWORD;
  Description : array[0..SIZE_MENU_DESCRIPTION-1] of char;
  DisplayName : array[0..SIZE_SHORT_FILE_NAME-1] of char;
  Flags : DWORD;
  Count : DWORD;
  Items : array[0..MAX_MENU_ITEMS-1] of TwcMenuItem;
  FastLoginChar : DWORD;
  SecurityEntryName : array[0..SIZE_SECURITY_NAME-1] of char;
  Reserved : array[0..128-1] of BYTE;
end;

const SIZE_USER_TITLE                       = 12;

type TUserInfo = record
  Id : DWORD;
  Name : array[0..SIZE_USER_NAME-1] of char;
  Title : array[0..SIZE_USER_TITLE-1] of char;
end;

const clSessionNone              = 0;
const clSessionUser              = 1;
const clSessionSystem            = 2;
const clSessionConfig            = 3;

const nsDown                     = 0;
const nsUp                       = 1;
const nsSigningOn                = 2;
const nsLoggedIn                 = 3;

const SIZE_NODEINFO_ACTIVITY                = 32;
const SIZE_NODEINFO_SPEED                   = 8;
const SIZE_NODEINFO_LASTCALLER              = 48;
const SIZE_USER_FROM                        = 32;

type TwcNodeInfo = record
  NodeStatus : DWORD;
  ServerState : DWORD;
  ConnectionId : DWORD;
  LastCaller : array[0..SIZE_NODEINFO_LASTCALLER-1] of char;
  User : TUserInfo;
  UserFrom : array[0..SIZE_USER_FROM-1] of char;
  UserPageAvailable : BOOL;
  Reserved1 : BOOL;
  Activity : array[0..SIZE_NODEINFO_ACTIVITY-1] of char;
  Speed : array[0..SIZE_NODEINFO_SPEED-1] of char;
  TimeCalled : TFileTime;
  CurrentTime : TFileTime;
  Reserved2 : DWORD;
  NodeNumber : DWORD;
  MinutesLeft : DWORD;
end;

const ucstNone                              = 0;
const ucstPersonal                          = 1;
const ucstPersonalAll                       = 2;
const ucstAll                               = 3;

const ucstMask                              =  $0F;
const ucfReserved1                          =  $10;
const ucfReserved2                          =  $20;
const ucfReserved3                          =  $40;
const ucfAllAttach                          =  $80;

const SIZE_USER_PHONE                       = 16;
const SIZE_USER_ADDRESS                     = 32;
const SIZE_USER_STATE                       = 16;
const SIZE_USER_ZIP                         = 12;
const NUM_USER_SECURITY                     = 10;

const sNotDisclosed              = 0;
const sMale                      = 1;
const sFemale                    = 2;

const ePrompt                    = 0;
const eLine                      = 1;
const eFullScreen                = 2;

const hlNovice                   = 0;
const hlRegular                  = 1;
const hlExpert                   = 2;

const ttAuto                     = 0;
const ttTTY                      = 1;
const ttAnsi                     = 2;

const fdSingle                   = 0;
const fdDouble                   = 1;
const fdFull                     = 2;
const fdAnsi                     = 3;

const mdScroll                   = 0;
const mdClear                    = 1;
const mdKeepHeader               = 2;

const ptText                     = 0;
const ptQwk                      = 1;
const ptOPX                      = 2;

//!
//! User validation states for ssClosedValidation setup
//!

const vsNone                     = 0;  // No validation required
const vsValidationRequired       = 1;  // Validation required
const vsPrevalidated             = 2;  // User has been prevalidated
const vsValidated                = 3;  // User is validated

type TUser = record
  Status : DWORD;
  Info : TUserInfo;
  From : array[0..SIZE_USER_FROM-1] of char;
  Password : array[0..SIZE_PASSWORD-1] of char;
  Security : array[0..NUM_USER_SECURITY-1, 0..SIZE_SECURITY_NAME-1] of char;
  Reserved1 : DWORD;
  AllowMultipleLogins : BOOL;
  LogonHoursOverride : BOOL;
  RealName : array[0..SIZE_USER_NAME-1] of char;
  PhoneNumber : array[0..SIZE_USER_PHONE-1] of char;
  Company : array[0..SIZE_USER_ADDRESS-1] of char;
  Address1 : array[0..SIZE_USER_ADDRESS-1] of char;
  Address2 : array[0..SIZE_USER_ADDRESS-1] of char;
  City : array[0..SIZE_USER_ADDRESS-1] of char;
  State : array[0..SIZE_USER_STATE-1] of char;
  Zip : array[0..SIZE_USER_ZIP-1] of char;
  Country : array[0..SIZE_USER_ADDRESS-1] of char;
  Sex : DWORD;
  Editor : DWORD;
  HelpLevel : DWORD;
  Protocol : DWORD;
  TerminalType : DWORD;
  FileDisplay : DWORD;
  MsgDisplay : DWORD;
  PacketType : DWORD;
  LinesPerPage : DWORD;
  HotKeys : BOOL;
  QuoteOnReply : BOOL;
  SortedListings : BOOL;
  PageAvailable : BOOL;
  EraseMorePrompt : BOOL;
  Reserved3 : BOOL;
  Language : array[0..SIZE_LANGUAGE_NAME-1] of char;
  LastCall : TFileTime;
  LastNewFiles : TFileTime;
  ExpireDate : TFileTime;
  FirstCall : TFileTime;
  BirthDate : TFileTime;
  Conference : DWORD;
  MsgsWritten : DWORD;
  Uploads : DWORD;
  TotalUploadKbytes : DWORD;
  Downloads : DWORD;
  TotalDownloadKbytes : DWORD;
  DownloadCountToday : DWORD;
  DownloadKbytesToday : DWORD;
  TimesOn : DWORD;
  TimeLeftToday : DWORD;
  MinutesLogged : DWORD;
  SubscriptionBalance : Longint;
  NetmailBalance : Longint;
  AccountLockedOut : BOOL;
  PreserveMimeMessages : BOOL;
  ShowEmailHeaders : BOOL;
  LastUpdate : TFileTime;
  SystemFlags : WORD;
  UserFlags : WORD;
  Validation : DWORD;
  PasswordOptions : WORD;
  PasswordExpireDays : WORD;
  PasswordChangeDate : TFileTime;
  AnonymousOnly : BOOL;
  AllowUserDirectory : BOOL;
end;

const SIZE_MESSAGE_SUBJECT                  = 72;
const SIZE_MESSAGE_NETWORK                  = 12;

type TFidoAddress = record
  Zone : WORD;
  Net : WORD;
  Node : WORD;
  Point : WORD;
end;

//!
//! The following mfXXXXXXXXX bit flags are used in the
//! TMsgHeader.MailFlags field.  Bits are defined as required
//! for unique/special mail processing.
//!

const mfPOP3Received                        =  $01000000;  // msg was received by a POP3 client
const mfReceiptCreated                      =  $02000000;  // Return Receipt was created
const mfSmtpDelivered                       =  $04000000;  // Message was sent by smtp
const mfNNTPPost                            =  $08000000;  // Message was posted by wcNNTP
const mfMimeSaved                           =  $00000001;  // Mime Preserved
const mfNoDupeChecking                      =  $00000002;  // No dupe checking when adding msg (450.6)

type TMsgHeader = record
  Status : DWORD;
  Conference : DWORD;
  Id : DWORD;
  Number : DWORD;
  From : TUserInfo;
  Towhom : TUserInfo;
  Subject : array[0..SIZE_MESSAGE_SUBJECT-1] of char;
  PostedTimeGMT : TFileTime;
  MsgTime : TFileTime;
  ReadTime : TFileTime;
  Private : BOOL;
  Received : BOOL;
  ReceiptRequested : BOOL;
  Deleted : BOOL;
  Tagged : BOOL;
  Reference : DWORD;
  ReplyCount : DWORD;
  FidoFrom : TFidoAddress;
  FidoTo : TFidoAddress;
  FidoFlags : DWORD;
  MsgSize : DWORD;
  PrevUnread : DWORD;
  NextUnread : DWORD;
  Network : array[0..SIZE_MESSAGE_NETWORK-1] of char;
  Attachment : array[0..SIZE_SHORT_FILE_NAME-1] of char;
  AllowDisplayMacros : BOOL;
  AddedByUserId : DWORD;
  Exported : BOOL;
  MailFlags : DWORD;
  NextAttachment : DWORD;
  ReadCount : DWORD;
  Reserved : array[0..112-1] of BYTE;
end;

const SIZE_FILE_DESCRIPTION                 = 76;
const MAX_FILE_LONGDESC_LINES               = 15;
const SIZE_FILE_LONGDESC                    = 80;

const ffAbortedUpload                       =  $00000001;  // signifies incomplete file.

type TFileRecord = record
  Status : DWORD;
  Area : DWORD;
  SFName : array[0..SIZE_SHORT_FILE_NAME-1] of char;
  Description : array[0..SIZE_FILE_DESCRIPTION-1] of char;
  Password : array[0..SIZE_PASSWORD-1] of char;
  FileFlags : DWORD;
  Size : DWORD;
  FileTime : TFileTime;
  LastAccessed : TFileTime;
  NeverOverwrite : BOOL;
  NeverDelete : BOOL;
  FreeFile : BOOL;
  CopyBeforeDownload : BOOL;
  Offline : BOOL;
  FailedScan : BOOL;
  FreeTime : BOOL;
  Downloads : DWORD;
  Cost : DWORD;
  Uploader : TUserInfo;
  UserInfo : DWORD;
  HasLongDescription : BOOL;
  PostTime : TFileTime;
  PrivateUserId : DWORD;
  Reserved : array[0..32-1] of BYTE;
  Name : array[0..SIZE_LONG_FILE_NAME-1] of char;
  Reserved2 : array[0..100-1] of BYTE;
end;

type TFullFileRecord = record
  Info : TFileRecord;
  StoredPath : array[0..MAX_PATH-1] of char;
  LongDescription : array[0..MAX_FILE_LONGDESC_LINES-1, 0..SIZE_FILE_LONGDESC-1] of char;
end;

//!---------------------------------------------------------
//! TFullFileRecord5 and TFileRecord5 is made available
//! here for SDK java/foxpro conversion purposes only
//!---------------------------------------------------------

type TFileRecord5 = record
  Status : DWORD;
  Area : DWORD;
  Name : array[0..SIZE_SHORT_FILE_NAME-1] of char;
  Description : array[0..SIZE_FILE_DESCRIPTION-1] of char;
  Password : array[0..SIZE_PASSWORD-1] of char;
  Reserved1 : DWORD;
  Size : DWORD;
  FileTime : TFileTime;
  LastAccessed : TFileTime;
  NeverOverwrite : BOOL;
  NeverDelete : BOOL;
  FreeFile : BOOL;
  CopyBeforeDownload : BOOL;
  Offline : BOOL;
  FailedScan : BOOL;
  FreeTime : BOOL;
  Downloads : DWORD;
  Cost : DWORD;
  Uploader : TUserInfo;
  UserInfo : DWORD;
  HasLongDescription : BOOL;
  Reserved : array[0..44-1] of BYTE;
end;

type TFullFileRecord5 = record
  Info : TFileRecord5;
  StoredPath : array[0..MAX_PATH-1] of char;
  LongDescription : array[0..MAX_FILE_LONGDESC_LINES-1, 0..SIZE_FILE_LONGDESC-1] of char;
end;

//!---------------------------------------------------------

type TSpellSuggestList = record
  Words : array[0..10-1, 0..32-1] of char;
end;

//!
//! System.Control or System.Control.# Signals
//!

const SC_WATCH_REQUEST                      = 0;  // Used by WcView Monitor
const SC_DISPLAY_UPDATE                     = 1;  // Used by WcView Monitor
const SC_PUSH_KEY                           = 2;  // Used by WcView Monitor
const SC_SECURITY_CHANGE                    = 3;  // user security changed
const SC_DISCONNECT                         = 4;  // disconnect the user
const SC_TIME_CHANGE                        = 5;  // user time online changed
const SC_USER_RECORD_CHANGE                 = 6;  // user record was updated

//!
//! System.Page Signals
//!

const SP_USER_PAGE                          = 0;  // page user (send short message)
const SP_SYSOP_CHAT                         = 1;  // sysop chat request
const SP_NEW_MESSAGE                        = 2;  // signal user of new direct message
const SP_ALT_NUMBER_FILE                    = 3;  // display disp\alt##.bbs

//!
//! System.Event Signals: File Database Signals
//!

const SE_FILE_UPLOAD                        = 10;  // file uploaded
const SE_FILE_DOWNLOAD                      = 11;  // file downloaded
const SE_FILE_DELETE                        = 12;  // file deleted
const SE_FILE_UPDATE                        = 13;  // file was updated/moved

//!
//! System.Event Signals: Miscellaneous Client Control Signals
//! Note: Currently, there is no implementation. However, the
//! signals are defined to begin a standard signal number set.
//!

const SE_SHUTDOWN_REQUEST                   = 20;  // request to shutdown
const SE_RESTART                            = 21;  // request to restart
const SE_CONFIG_CHANGE                      = 22;  // Makewild has changed, minimum
const SE_POPCONNECT                         = 23;  // POP3 Client has connected, 450.3

//!
//! System.Event Signals: Server Status Change
//!

const SE_SERVER_STATE_CHANGE                = 30;  // server state has changed
const SE_NODE_STATE_CHANGE                  = 31;  // node state has changed

//!
//! System.MailServer Signals: This channel is specifically
//! designed for events between wcmail/wcsmtp and configuration
//! components so that wcmail/wcsmtp can automatically reread
//! internal data.  NOTE: wcSMTP port info changes requires
//! a restart. Only non-essential data is reread
//!

const SE_MAILSERVER_UPDATE                  = 40;  // signals for wcmail/wcsmtp, 450.6

//!
//! Data Structure used for SE_FILE_xxxxxx channel signals.
//!

type TSystemEventFileInfo = record
  FileArea : DWORD;
  ConnectionId : DWORD;
  TimeStamp : TFileTime;
  szFileName : array[0..SIZE_LONG_FILE_NAME-1] of char;
end;

//!
//! Structure used by WCVIEW to display screen data sent by
//! Host clients.  WCVIEW will send SC_WATCH_REQUEST to clients
//! asking them to provide screen data. If the clients are listening,
//! they can fill in the structure and send the data with the
//! SC_DISPLAY_UPDATE channel signal which will then signal WCVIEW
//! to update its display screens.
//!

type TSystemControlViewMsg = record
  Line : WORD;
  Count : WORD;
  Text : array[0..3-1, 0..80-1] of WORD;
  CursorX : WORD;
  CursorY : WORD;
  MinutesLeft : WORD;
end;

//!
//! Data Structure used for SP_xxxxxx channel signals
//!

type TSystemPageNewMessage = record
  Conference : DWORD;
  ConferenceName : array[0..SIZE_CONFERENCE_NAME-1] of char;
  Id : DWORD;
  From : TUserInfo;
  Subject : array[0..SIZE_MESSAGE_SUBJECT-1] of char;
end;

//!
//! Data Structure used for instant messages, channel "System.Page"
//!

const SIZE_SYSTEMPAGE_LINES                 = 3;
const SIZE_SYSTEMPAGE_TEXT                  = 80;

type TSystemPageInstantMessage = record
  From : array[0..MAX_USER_NAME-1] of char;
  Text : array[0..SIZE_SYSTEMPAGE_LINES-1, 0..SIZE_SYSTEMPAGE_TEXT-1] of char;
  InviteToChat : BOOL;
end;

//!
//! Structure for Wildcat! Service Creations
//!

type TWildcatService = record
  Name : array[0..SIZE_SERVICE_NAME-1] of char;
  Vendor : array[0..SIZE_SERVICE_NAME-1] of char;
  Version : DWORD;
  Address : DWORD;
  Port : DWORD;
end;

//!
//! Structure for Connection Information
//! Set GetConnectionInfo() SDK function
//!

type TConnectionInfo = record
  ConnectionId : DWORD;
  Node : DWORD;
  Time : DWORD;
  IdleTime : DWORD;
  Calls : DWORD;
  WindowsUserName : array[0..80-1] of char;
  Computer : array[0..SIZE_COMPUTER_NAME-1] of char;
  IpAddress : DWORD;
  ProgramName : array[0..MAX_PATH-1] of char;
  RefCount : DWORD;
  User : TUserInfo;
  HandlesOpen : DWORD;
  ChannelsOpen : DWORD;
  CurrentTid : DWORD;
  PeerAddress : DWORD;
  Reserved : array[0..96-1] of BYTE;
end;

//!
//! Structure for GetWildcatServerInfo() function
//! Combines multiple server calls to get server totals in 1 call
//!

type TWildcatServerInfo = record
  TotalCalls : DWORD;
  TotalUsers : DWORD;
  TotalMessages : DWORD;
  TotalFiles : DWORD;
  MemoryUsage : DWORD;
  MemoryLoad : DWORD;
  LastMessageId : DWORD;
  LastUserId : DWORD;
  Reserved : array[0..92-1] of BYTE;
end;

//!
//! v5.5.450.3
//! Structure for WcGetProcessTimes()
//! Returns server process running times information
//!

type TWildcatProcessTimes = record
  ftSystem : TFileTime;
  ftStart : TFileTime;
  ftExit : TFileTime;
  ftKernel : TFileTime;
  ftUser : TFileTime;
  Reserved : array[0..24-1] of BYTE;
end;

//! v5.5.450.3
//! Options and structures for Wildcat! SASL Authentication functions.
//!

const WCSASL_SUCCESS                        = 0;
const WCSASL_AUTH_OK                        = WCSASL_SUCCESS;
const WCSASL_AUTH_FAIL                      = 1;
const WCSASL_INVALID_METHOD                 = 2;
const WCSASL_GET_RESPONSE                   = 3;
const WCSASL_GET_PASSWORD                   = 4;
const WCSASL_LOOKUPUSER                     = 5;
const SIZE_SASL_NAME                        = 32;

//!
//! TWildcatSASLContext is used to store any context specific
//! data we need in SASL based connections
//!

type TWildcatSASLContext = record
  szSaslMethod : array[0..SIZE_SASL_NAME-1] of char;
  szChallenge : array[0..MAX_PATH-1] of char;
  dwState : DWORD;
  dwUserid : DWORD;
  Data : array[0..4096-1] of BYTE;
  szUsername : array[0..SIZE_USER_NAME-1] of char;
  szRealm : array[0..MAX_PATH-1] of char;
  szDomain : array[0..MAX_PATH-1] of char;
  szNonce : array[0..MAX_PATH-1] of char;
  szCNonce : array[0..MAX_PATH-1] of char;
  dwCNonceCount : DWORD;
  szURI : array[0..MAX_PATH-1] of char;
  szMethod : array[0..20-1] of char;
  szAlg : array[0..64-1] of char;
  szQop : array[0..64-1] of char;
end;

type TWildcatCallback    = function(userdata: Dword; const msg: TChannelMessage): Dword; stdcall;

type TServerDownCallback = function(var p): dword; stdcall;

type PSecurityName = ^TSecurityName;
     TSecurityName = array [0..SIZE_SECURITY_NAME-1] of Char;

implementation

end.
