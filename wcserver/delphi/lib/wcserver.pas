//------------------------------------------------------------------------
// Delphi Wildcat! SDK API v8.0.454.16
// Copyright (c) 1998-2025 Santronics Software, Inc. All Rights Reserved.
//
// DO NOT EDIT THIS FILE!!!
//
// Automatically generated from ..\include\wcserver.h by cpp2pas.
//------------------------------------------------------------------------
{$O+,F+,I-,S-,R-}
unit wcserver;

interface

{$IFDEF WIN32}
uses windows, wctype;
{$ELSE}
uses WinTypes, wctype;
{$ENDIF}


{$DEFINE __WCSERVER_H}

//! Group: Client SDK Functions

//! Return the RPC Server 32 or 64 bit mode.

function WcGetServerPlatform: DWORD; stdcall; external 'wcsrv2.dll';

//! The functions to get the Wildcat version and build can be called before
//! WildcatServerConnect.

function GetWildcatVersion: DWORD; stdcall; external 'wcsrv2.dll';
function GetWildcatBuild: DWORD; stdcall; external 'wcsrv2.dll';

//! The functions to get the Wildcat version and build at the server and
//! can only be called after a context is created

function WcGetServerVersion: DWORD; stdcall; external 'wcsrv2.dll';
function WcGetServerBuild: DWORD; stdcall; external 'wcsrv2.dll';

//! WildcatServerConnect should be called once per application to connect to
//! the Wildcat server.  The window handle is used as the parent window when
//! the server connect dialog box is displayed.  If there is no convenient
//! window handle available, pass NULL.  Console mode applications should
//! also pass NULL.  WildcatServerConnectSpecific can be called if you know
//! the machine name of the server you would like to connect to.
//! WildcatServerDialog allows the user to pick a server from a dialog box.
//!
//! WildcatServerConnectLocal() was added in v5.7 to support connections
//! only to the local computer. Performs no broadcasting.

function WildcatServerConnect(parent: HWND): BOOL; stdcall; external 'wcsrv2.dll';
function WildcatServerConnectSpecific(parent: HWND; const computername: PChar): BOOL; stdcall; external 'wcsrv2.dll';
function WildcatServerConnectLocal(parent: HWND): BOOL; stdcall; external 'wcsrv2.dll';
function WildcatServerDialog(parent: HWND; computername: PChar; namesize: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function SetWildcatErrorMode(verbose: BOOL): BOOL; stdcall; external 'wcsrv2.dll';
function WildcatServerShutdown(const pwd: PChar; const force: BOOL): BOOL; stdcall; external 'wcsrv2.dll';

//! GetConnectedServer retrieves the computer name of the connected server

function GetConnectedServer(computername: PChar; namesize: DWORD): BOOL; stdcall; external 'wcsrv2.dll';

//! These functions start and stop a thread-specific context for this client
//! on the server.  Even if an application only has one thread, the
//! WildcatServerCreateContext function must be called before any other
//! functions will work.
//!
//! WildcatServerCreateContextFromHandle creates a new client context that
//! refers to an existing context on the server.  The handle is generally
//! retrieved using GetWildcatServerContextHandle in one application, and
//! passed to WildcatServerCreateContextFromHandle in another application.

function WildcatServerCreateContext: BOOL; stdcall; external 'wcsrv2.dll';
function WildcatServerCreateContextFromHandle(context: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function WildcatServerCreateContextFromChallenge(const challenge: PChar): BOOL; stdcall; external 'wcsrv2.dll';
function GetWildcatServerContextHandle: DWORD; stdcall; external 'wcsrv2.dll';
function WildcatServerDeleteContext: BOOL; stdcall; external 'wcsrv2.dll';

//! This function sets up a callback for the client application.
//! Channel messages are presented to the client through this
//! callback mechanism.

function SetupWildcatCallback(cbproc: TWildcatCallback; userdata: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function RemoveWildcatCallback: BOOL; stdcall; external 'wcsrv2.dll';

//! This function is used to grant another thread in the same application
//! equivalent access as the thread that calls this function.  It causes the
//! other thread to refer to the same server context.  This is a lightweight
//! version of WildcatServerCreateContextFromHandle.  One difference is that
//! since this function does not create a new client context,
//! WildcatServerDeleteContext must only be called once for this context,
//! even though there may be more than one thread accessing it.

function GrantThreadAccess(tid: DWORD): BOOL; stdcall; external 'wcsrv2.dll';

//! These two functions allow you to more directly manipulate the Wildcat
//! server context associated with the current thread.  Like
//! GrantThreadAccess, the Wildcat server is only aware of one instance of
//! the context, so WildcatServerDeleteContext must only be called once per
//! server context.

function GetWildcatThreadContext: DWORD; stdcall; external 'wcsrv2.dll';
function SetWildcatThreadContext(context: DWORD): BOOL; stdcall; external 'wcsrv2.dll';

//! Returns the current node number, or 0 if no node number has been
//! allocated.

function GetNode: DWORD; stdcall; external 'wcsrv2.dll';

//! Set the current node status (nsDown, nsUp, nsSigningOn, nsLoggedIn).

function SetNodeStatus(nodestatus: DWORD): BOOL; stdcall; external 'wcsrv2.dll';

//! Set the node down status (ndNone, ndRefuseLogin, ndDown).

//! Get the TMakewild global configuration record.

function GetMakewild(var mw: TMakewild): BOOL; stdcall; external 'wcsrv2.dll';
function GetComputerConfig(var cc: TComputerConfig): BOOL; stdcall; external 'wcsrv2.dll';

//! Get the challenge string used for MD5 password authentication.

function GetChallengeString(buf: PChar; bufsize: DWORD): BOOL; stdcall; external 'wcsrv2.dll';

//! Log in to the Wildcat server as the 'system'.  This gives unrestricted
//! access to all aspects of the server.  The computer from which this
//! function is called must have been set up with the Wildcat System
//! password, if any.

function LoginSystem: BOOL; stdcall; external 'wcsrv2.dll';

//! Look up a user account by name, and return basic account information.

function LookupName(const name: PChar; var uinfo: TUserInfo): BOOL; stdcall; external 'wcsrv2.dll';

//! Allocate a node for a particular call type.  If a specific node is
//! required, pass it in the 'node' parameter, otherwise pass zero.

function AllocateNode(node: DWORD; calltype: DWORD; const speed: PChar): BOOL; stdcall; external 'wcsrv2.dll';

//! Log in to the userver under a user account.  All further access to the
//! server is checked based on the access profile(s) of the user.  The
//! password can either be plaintext or an MD5 digest string.

function LoginUser(userid: DWORD; const password: PChar; var user: TUser): BOOL; stdcall; external 'wcsrv2.dll';
function LoginUserEx(userid: DWORD; const password: PChar; calltype: DWORD; const speed: PChar; var user: TUser): BOOL; stdcall; external 'wcsrv2.dll';
function LoginRadiusUser(userid: DWORD; chapid: BYTE; const challenge: BYTE; challengesize: DWORD; const challresponse: BYTE; var user: TUser): BOOL; stdcall; external 'wcsrv2.dll';

//! Log out of the server.  This is called no matter whether you log in to
//! the server using LoginSystem or LoginUser.

function LogoutUser: BOOL; stdcall; external 'wcsrv2.dll';

//! Checks to see whether the current context is logged in or not.  Returns
//! the user record if it is logged in as a user.  See clSessionXXXX
//! constants

function WildcatLoggedIn(var user: TUser): DWORD; stdcall; external 'wcsrv2.dll';

//! Gets the number of users currently online.

function GetUsersOnline: DWORD; stdcall; external 'wcsrv2.dll';

//! Get the object flags for a particular access profile.  This may be
//! called before a user is logged in.

function GetProfileObjectFlags(const profile: PChar; objectid: DWORD): DWORD; stdcall; external 'wcsrv2.dll';

//! The Wildcat server file API functions are modeled after the Win32 file
//! API functions.  See the Win32 API documentation for details regarding
//! these functions. See WCPATHS.DOC for information regarding the format of
//! the path names that may be used with these functions.

function WcCloseHandle(h: THandle): BOOL; stdcall; external 'wcsrv2.dll';
function WcCreateDirectory(const dir: PChar): BOOL; stdcall; external 'wcsrv2.dll';
function WcRemoveDirectory(const dir: PChar): BOOL; stdcall; external 'wcsrv2.dll';
function WcCreateFile(const fn: PChar; access: DWORD; sharemode: DWORD; create: DWORD): THandle; stdcall; external 'wcsrv2.dll';
function WcDeleteFile(const fn: PChar): BOOL; stdcall; external 'wcsrv2.dll';
function WcExistFile(const fn: PChar): BOOL; stdcall; external 'wcsrv2.dll';
function WcFindFirstFile(const fn: PChar; var fd: TWin32FindData): THandle; stdcall; external 'wcsrv2.dll';
function WcFindNextFile(ff: THandle; var fd: TWin32FindData): BOOL; stdcall; external 'wcsrv2.dll';
function WcFindClose(ff: THandle): BOOL; stdcall; external 'wcsrv2.dll';
function WcGetFileSize(h: THandle): DWORD; stdcall; external 'wcsrv2.dll';
function WcGetFileTime(h: THandle; var ft: TFileTime): BOOL; stdcall; external 'wcsrv2.dll';
function WcGetFileTimeByName(const fn: PChar; var ft: TFileTime): BOOL; stdcall; external 'wcsrv2.dll';
function WcMoveFile(const src: PChar; const dest: PChar): BOOL; stdcall; external 'wcsrv2.dll';
function WcReadFile(h: THandle; var buffer; requested: DWORD; var read: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function WcReadLine(h: THandle; var buffer; buflen: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function WcSetEndOfFile(h: THandle): BOOL; stdcall; external 'wcsrv2.dll';
function WcSetFilePointer(h: THandle; dist: Longint; movemethod: DWORD): DWORD; stdcall; external 'wcsrv2.dll';
function WcSetFileTime(h: THandle; var ft: TFileTime): BOOL; stdcall; external 'wcsrv2.dll';
function WcWriteFile(h: THandle; var buffer; requested: DWORD; var written: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function WcRenameFile(const from: PChar; const toname: PChar): BOOL; stdcall; external 'wcsrv2.dll';

function WcResolvePathName(const wfname: PChar; var access: DWORD; var share: DWORD; var create: DWORD; dest: PChar; const destsize: DWORD): BOOL; stdcall; external 'wcsrv2.dll';

//! Get the connection Id for the current context.  Connection Ids are
//! unique and can reasonably be assumed not to repeat during the time the
//! server is up.

function GetConnectionId: DWORD; stdcall; external 'wcsrv2.dll';

//! Get the total number of calls made to the system (not server API calls,
//! user calls). The 'increment' parameter determines whether or not the
//! count is increased by one before returning the result.

function GetTotalCalls(increment: BOOL): DWORD; stdcall; external 'wcsrv2.dll';

//! This function combines a WcCreateFile, WcReadFile, and WcCloseHandle
//! into one operation.

function GetText(const fn: PChar; buf: PChar; bufsize: DWORD; var retsize: DWORD): BOOL; stdcall; external 'wcsrv2.dll';

//! The following functions access the security data in the Wildcat server.
//! Each 'securable' object (conference, file area, door, etc) has a unique
//! Object Id stored with it.  Access profiles are tables of Object Ids and
//! access flags. When a user logs in, a composite access table consisting
//! of the logical OR of all the flags in the user' access profiles is
//! created.  These functions access the information in that composite
//! array.
//!
//! Object flags are often simply zero or one to indicate no access or allow
//! access, but the individual bits may mean different things such as
//! Join/Read/Write/Sysop access in a conference area.

function GetObjectFlags(objectid: DWORD): DWORD; stdcall; external 'wcsrv2.dll';
function GetMultipleObjectFlags(const objectid: DWORD; count: DWORD; var flags: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function GetObjectById(objectid: DWORD; var objectname: TObjectName): BOOL; stdcall; external 'wcsrv2.dll';
function GetMultipleObjectsById(const objectid: DWORD; count: DWORD; var objectname: TObjectName): BOOL; stdcall; external 'wcsrv2.dll';
function GetObjectByName(classid: DWORD; const name: PChar; var objectname: TObjectName; var tid: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function GetNextObjectByName(var objectname: TObjectName; var tid: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function GetStringObjectId(objectclass: DWORD; const name: PChar): DWORD; stdcall; external 'wcsrv2.dll';
function GetStringObjectFlags(objectclass: DWORD; const name: PChar): DWORD; stdcall; external 'wcsrv2.dll';

//! These functions access the list of security profiles in the server.

function GetSecurityProfileCount: DWORD; stdcall; external 'wcsrv2.dll';
function GetSecurityProfileNames(count: Dword; names: PSecurityName): Boolean; stdcall; external 'wcsrv2.dll';
function GetSecurityProfileByIndex(index: DWORD; var profile: TSecurityProfile): BOOL; stdcall; external 'wcsrv2.dll';
function GetSecurityProfileByName(const name: PChar; var profile: TSecurityProfile): BOOL; stdcall; external 'wcsrv2.dll';

//! These functions access the list of access profile names in the server.

function GetAccessProfileCount: DWORD; stdcall; external 'wcsrv2.dll';
function GetAccessProfileNames(count: Dword; names: PSecurityName): Boolean; stdcall; external 'wcsrv2.dll';
function GetAccessProfileName(index: Dword; var name: TSecurityName): Boolean; stdcall; external 'wcsrv2.dll';

//! These functions access the list of conferences (message areas) in
//! the server.

function GetConferenceCount: DWORD; stdcall; external 'wcsrv2.dll';
function GetConfDesc(conference: DWORD; var cd: TConfDesc): BOOL; stdcall; external 'wcsrv2.dll';

//! These functions access the list of conference groups in the server.

function GetConferenceGroupCount: DWORD; stdcall; external 'wcsrv2.dll';
function GetConferenceGroup(index: DWORD; var cg: TConferenceGroup): BOOL; stdcall; external 'wcsrv2.dll';

//! These functions access the list of file areas in the server.

function GetFileAreaCount: DWORD; stdcall; external 'wcsrv2.dll';
function GetFileArea(area: DWORD; var fa: TFileArea): BOOL; stdcall; external 'wcsrv2.dll';

//! These functions access the list of file groups in the server.

function GetFileGroupCount: DWORD; stdcall; external 'wcsrv2.dll';
function GetFileGroup(index: DWORD; var fg: TFileGroup): BOOL; stdcall; external 'wcsrv2.dll';

//! These functions access the list of doors in the server.

function GetDoorCount: DWORD; stdcall; external 'wcsrv2.dll';
function GetDoor(index: DWORD; var di: TDoorInfo): BOOL; stdcall; external 'wcsrv2.dll';

//! These functions access the list of languages in the server.

function GetLanguageCount: DWORD; stdcall; external 'wcsrv2.dll';
function GetLanguage(index: DWORD; var li: TLanguageInfo): BOOL; stdcall; external 'wcsrv2.dll';

//! This function gets a specific modem profile from the server.

function GetModemProfile(const name: PChar; var mp: TModemProfile): BOOL; stdcall; external 'wcsrv2.dll';

//! Get the current maximum number of nodes that have been allocated.

function GetNodeCount: DWORD; stdcall; external 'wcsrv2.dll';

//! Get the maximum number of concurrent users supported by this
//! installation of Wildcat.

function GetMaximumUserCount: DWORD; stdcall; external 'wcsrv2.dll';

//! Get a node configuration record for the specified node.  Use
//! by Wconline to start modem nodes.

function GetNodeConfig(node: DWORD; var nc: TNodeConfig): BOOL; stdcall; external 'wcsrv2.dll';

//! Get a node information record for a specific node.

function GetNodeInfo(node: DWORD; var ni: TwcNodeInfo): BOOL; stdcall; external 'wcsrv2.dll';

//! Get a node information record for a specific connection Id.

function GetNodeInfoByConnectionId(id: DWORD; var ni: TwcNodeInfo): BOOL; stdcall; external 'wcsrv2.dll';

//! Get a node information record for a specific name.

function GetNodeInfoByName(const name: PChar; var ni: TwcNodeInfo): BOOL; stdcall; external 'wcsrv2.dll';

//! Get multiple node information records starting at a specific node.

function GetNodeInfos(node: DWORD; count: DWORD; var ni: TwcNodeInfo): BOOL; stdcall; external 'wcsrv2.dll';

//! Set the current node's information record.  Only non-critical fields are
//! allowed to be changed by this function.

function SetNodeInfo(const ni: TwcNodeInfo): BOOL; stdcall; external 'wcsrv2.dll';

//! Set the current activity string for the current node.

function SetNodeActivity(const activity: PChar): BOOL; stdcall; external 'wcsrv2.dll';

//! Server State Functions

function SetServerState(const port: PChar; state: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function GetServerState(index: DWORD; var ss: TServerState): BOOL; stdcall; external 'wcsrv2.dll';
function SetNodeServerState(node: DWORD; state: DWORD): BOOL; stdcall; external 'wcsrv2.dll';

//! The following functions access the file database in Wildcat.  The
//! functions should be straightforward with the following notes:
//!
//! - GetFileRecByXxx gets a specific record by key.  SearchFileRecByXxx
//!   searches for matching record, or the next record in the database,
//!   based on a key.
//!
//! - FileSearch returns an array of __int64 (64-bit integers).  The high 32
//!   bits indicates the file area of the record, and the low 32 bits
//!   indicates the absolute reference number of the record.
//!   GetFileRecAbsolute gets a specific file record.
//!
//! - Most functions return a TFileRecord which does not contain the long
//!   file description. To retrieve the long file description, use
//!   GetFullFileRec.

function AddFileRec(var f: TFullFileRecord): BOOL; stdcall; external 'wcsrv2.dll';
function DeleteFileRec(const f: TFileRecord; disktoo: BOOL): BOOL; stdcall; external 'wcsrv2.dll';
function GetFileRecAbsolute(ref: DWORD; var f: TFileRecord): BOOL; stdcall; external 'wcsrv2.dll';
function GetFileRecByNameArea(const name: PChar; area: DWORD; var f: TFileRecord; var tid: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function GetFileRecByAreaName(area: DWORD; const name: PChar; var f: TFileRecord; var tid: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function GetFileRecByAreaDate(area: DWORD; const t: TFileTime; var f: TFileRecord; var tid: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function GetFileRecByUploader(id: DWORD; var f: TFileRecord; var tid: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function GetFirstFileRec(keynum: DWORD; var f: TFileRecord; var tid: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function GetFullFileRec(var f: TFileRecord; var full: TFullFileRecord): BOOL; stdcall; external 'wcsrv2.dll';
function GetLastFileRec(keynum: DWORD; var f: TFileRecord; var tid: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function GetNextFileRec(keynum: DWORD; var f: TFileRecord; var tid: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function GetPrevFileRec(keynum: DWORD; var f: TFileRecord; var tid: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function GetTotalFiles: DWORD; stdcall; external 'wcsrv2.dll';
function GetTotalFilesInArea(area: DWORD): DWORD; stdcall; external 'wcsrv2.dll';
function GetTotalFilesInGroup(group: DWORD): DWORD; stdcall; external 'wcsrv2.dll';
function IncrementDownloadCount(var f: TFileRecord): BOOL; stdcall; external 'wcsrv2.dll';
function SearchFileRecByNameArea(const name: PChar; area: DWORD; var f: TFileRecord; var tid: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function SearchFileRecByAreaName(area: DWORD; const name: PChar; var f: TFileRecord; var tid: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function SearchFileRecByAreaDate(area: DWORD; const t: TFileTime; var f: TFileRecord; var tid: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function SearchFileRecByDateArea(const t: TFileTime; area: DWORD; var f: TFileRecord; var tid: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function SearchFileRecByUploader(id: DWORD; var f: TFileRecord; var tid: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function UpdateFileRec(var f: TFileRecord): BOOL; stdcall; external 'wcsrv2.dll';
function UpdateFullFileRec(var f: TFullFileRecord): BOOL; stdcall; external 'wcsrv2.dll';

//! The following functions access the message databases in Wildcat.
//! Messages are identified by there conference number and Id.  Message Ids
//! are assigned when the message is added to the database and never
//! reassigned.  Message Ids are very large numbers, so a separate message
//! 'Number' is provided for convenience.  Message numbers are assigned
//! sequentially within a conference.

function AddMessage(var msg: TMsgHeader; const text: PChar): BOOL; stdcall; external 'wcsrv2.dll';
function DeleteMessage(var msg: TMsgHeader): BOOL; stdcall; external 'wcsrv2.dll';
function GetHighMessageNumber(conf: DWORD): DWORD; stdcall; external 'wcsrv2.dll';
function GetLowMessageNumber(conf: DWORD): DWORD; stdcall; external 'wcsrv2.dll';
function GetMessageById(conf: DWORD; msgid: DWORD; var msg: TMsgHeader): BOOL; stdcall; external 'wcsrv2.dll';
function GetMsgIdFromNumber(conf: DWORD; number: DWORD): DWORD; stdcall; external 'wcsrv2.dll';
function GetMsgNumberFromId(conf: DWORD; msgid: DWORD): DWORD; stdcall; external 'wcsrv2.dll';
function GetNextMessage(var msg: TMsgHeader): BOOL; stdcall; external 'wcsrv2.dll';
function GetPrevMessage(var msg: TMsgHeader): BOOL; stdcall; external 'wcsrv2.dll';
function GetTotalMessages: DWORD; stdcall; external 'wcsrv2.dll';
function GetTotalMessagesInConference(conf: DWORD): DWORD; stdcall; external 'wcsrv2.dll';
function GetTotalMessagesInGroup(group: DWORD): DWORD; stdcall; external 'wcsrv2.dll';
function IncrementReplyCount(var msg: TMsgHeader): BOOL; stdcall; external 'wcsrv2.dll';
function IncrementReadCount(var msg: TMsgHeader): BOOL; stdcall; external 'wcsrv2.dll';
function MarkMessageRead(var msg: TMsgHeader): BOOL; stdcall; external 'wcsrv2.dll';
function MessageSearch(conf: DWORD; msgid: DWORD; msflags: DWORD; const text: PChar; var msg: TMsgHeader): BOOL; stdcall; external 'wcsrv2.dll';
function SearchMessageById(conf: DWORD; msgid: DWORD; var msg: TMsgHeader): BOOL; stdcall; external 'wcsrv2.dll';
function SetMessagePrivate(var msg: TMsgHeader; pvt: BOOL): BOOL; stdcall; external 'wcsrv2.dll';
function UpdateMessageFidoInfo(var msg: TMsgHeader): BOOL; stdcall; external 'wcsrv2.dll';

//! Use this function to define a group of conference numbers and to retrieve
//! the highest msgid for each conference.

function GetHighMessageIds(count: DWORD; const conferences: DWORD; var ids: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function SetMessageExported(var msg: TMsgHeader; exported: BOOL): BOOL; stdcall; external 'wcsrv2.dll';

//! The following functions access the user database in Wildcat.  Like the
//! file database, GetUserByXxx gets a specific record, and SearchUserByXxx
//! looks for a matching or the next higher record in the database.
//! GetUserVariable and SetUserVariable can be used to store private
//! application-specific information in a user record.  They are similar in
//! use to the profile functions in the Windows API.

function AddNewUser(var u: TUser): BOOL; stdcall; external 'wcsrv2.dll';
function DeleteOtherUser(const u: TUser): BOOL; stdcall; external 'wcsrv2.dll';
function GetUserById(id: DWORD; var u: TUser; var tid: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function GetUserByLastName(const name: PChar; var u: TUser; var tid: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function GetUserByName(const name: PChar; var u: TUser; var tid: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function GetUserBySecurity(const security: PChar; var u: TUser; var tid: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function GetUserByLastCall(const ft: TFileTime; var u: TUser; var tid: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function GetUserVariable(id: DWORD; const section: PChar; const key: PChar; const def: PChar; dest: PChar; destsize: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function GetUserVariables(id: DWORD; buffer: Pointer; requested: DWORD; var read: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function GetFirstUser(keynum: DWORD; var u: TUser; var tid: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function GetLastUser(keynum: DWORD; var u: TUser; var tid: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function GetNextUser(keynum: DWORD; var u: TUser; var tid: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function GetPrevUser(keynum: DWORD; var u: TUser; var tid: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function GetTotalUsers: DWORD; stdcall; external 'wcsrv2.dll';
function SearchUserById(id: DWORD; var u: TUser; var tid: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function SearchUserByLastName(const name: PChar; var u: TUser; var tid: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function SearchUserByName(const name: PChar; var u: TUser; var tid: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function SearchUserBySecurity(const security: PChar; var u: TUser; var tid: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function SearchUserByLastCall(const ft: TFileTime; var u: TUser; var tid: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function SetUserVariable(id: DWORD; const section: PChar; const key: PChar; const data: PChar): BOOL; stdcall; external 'wcsrv2.dll';
function UpdateUser(var u: TUser): BOOL; stdcall; external 'wcsrv2.dll';

//! Convenience functions for accessing the set of conferences that the user
//! can access.  The 'flags' parameter in these functions refers to the
//! user's per-conference read flags.  Using 0 as the 'flags' parameter
//! means ignore it when looking for conferences.

function GetEffectiveConferenceGroupCount: DWORD; stdcall; external 'wcsrv2.dll';
function GetEffectiveConferenceCount(group: DWORD; flags: DWORD): DWORD; stdcall; external 'wcsrv2.dll';
function GetFirstConference(group: DWORD; flags: DWORD): Longint; stdcall; external 'wcsrv2.dll';
function GetLastConference(group: DWORD; flags: DWORD): Longint; stdcall; external 'wcsrv2.dll';
function GetNextConference(group: DWORD; flags: DWORD; conf: DWORD): Longint; stdcall; external 'wcsrv2.dll';
function GetPrevConference(group: DWORD; flags: DWORD; conf: DWORD): Longint; stdcall; external 'wcsrv2.dll';
function GetFirstConferenceUnread: Longint; stdcall; external 'wcsrv2.dll';
function GetNextConferenceUnread(conf: DWORD): Longint; stdcall; external 'wcsrv2.dll';
function GetPrevConferenceUnread(conf: DWORD): Longint; stdcall; external 'wcsrv2.dll';
function IsConferenceInGroup(group: DWORD; conf: DWORD): BOOL; stdcall; external 'wcsrv2.dll';

//! Convenience functions for accessing the set of file areas that the user
//! can access.  Unlike the conference functions, the 'flags' parameter in
//! these functions refers to the user's access flags in the file area
//! (that is, list/download/upload/sysop).  Using 0 as the 'flags' parameter
//! means ignore it when looking for file areas.

function GetEffectiveFileGroupCount: DWORD; stdcall; external 'wcsrv2.dll';
function GetEffectiveFileAreaCount(group: DWORD; flags: DWORD): DWORD; stdcall; external 'wcsrv2.dll';
function GetFirstFileArea(group: DWORD; flags: DWORD): Longint; stdcall; external 'wcsrv2.dll';
function GetLastFileArea(group: DWORD; flags: DWORD): Longint; stdcall; external 'wcsrv2.dll';
function GetNextFileArea(group: DWORD; flags: DWORD; area: DWORD): Longint; stdcall; external 'wcsrv2.dll';
function GetPrevFileArea(group: DWORD; flags: DWORD; area: DWORD): Longint; stdcall; external 'wcsrv2.dll';
function IsFileAreaInGroup(group: DWORD; area: DWORD): BOOL; stdcall; external 'wcsrv2.dll';

//! Functions to get and set the current user's per-conference information.

function GetLastRead(conf: DWORD): DWORD; stdcall; external 'wcsrv2.dll';
function GetFirstUnread(conf: DWORD): DWORD; stdcall; external 'wcsrv2.dll';
function GetConfFlags(conf: DWORD): DWORD; stdcall; external 'wcsrv2.dll';
function SetLastRead(conf: DWORD; lastread: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function SetConfFlags(conf: DWORD; flags: DWORD): BOOL; stdcall; external 'wcsrv2.dll';

//! Functions to get and set an arbitrary user's per-conference information.

function GetUserLastRead(userid: DWORD; conf: DWORD): DWORD; stdcall; external 'wcsrv2.dll';
function GetUserFirstUnread(userid: DWORD; conf: DWORD): DWORD; stdcall; external 'wcsrv2.dll';
function GetUserConfFlags(userid: DWORD; conf: DWORD): DWORD; stdcall; external 'wcsrv2.dll';
function SetUserLastRead(userid: DWORD; conf: DWORD; lastread: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function SetUserConfFlags(userid: DWORD; conf: DWORD; flags: DWORD): BOOL; stdcall; external 'wcsrv2.dll';

//! Write an entry to a log file.  The 'fname' parameter must NOT contain a
//! full path, just a file name.

function WriteLogEntry(const fname: PChar; const text: PChar): BOOL; stdcall; external 'wcsrv2.dll';

//! Write an entry to the current node's activity log file.

function WriteActivityLogEntry(const text: PChar): BOOL; stdcall; external 'wcsrv2.dll';

//! Check the spelling of a string based on the server's spelling dictionary.
//! Returns the position and length of the bad word, if any.
//! - Suggest alternate spellings for a misspelled word.
//! - Add a word to the auxiliary dictionary.

function SpellCheckLine(const s: PChar; startpos: DWORD; var badpos: DWORD; var badlen: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function SpellCheckSuggest(const s: PChar; var sl: TSpellSuggestList): DWORD; stdcall; external 'wcsrv2.dll';
function SpellCheckAddWord(const s: PChar): BOOL; stdcall; external 'wcsrv2.dll';

//! Open a communications channel.  Channels are named, and created on the
//! fly as necessary.  Messages can either be broadcast ('destid'=0), or
//! directed to a specific recipient.  The 'userdata' parameter can be used
//! to distinguish different formats of the message data.

function OpenChannel(const name: PChar): DWORD; stdcall; external 'wcsrv2.dll';
function CloseChannel(chandle: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function WriteChannel(chandle: DWORD; destid: DWORD; userdata: DWORD; data: Pointer; datasize: DWORD): BOOL; stdcall; external 'wcsrv2.dll';

//! Get the Qwk packet size limits based on the user's reported speed.

function GetQwkBaudLimits(var perpacket: DWORD; var perconference: DWORD): BOOL; stdcall; external 'wcsrv2.dll';

//! Retrieve a service record by name.  The service record contains an
//! appropriate IP address and port to pass to connect() to establish
//! communications with the service.  Since the communications with the
//! service does not take place through the Wildcat server, no security or
//! authentication is provided by default.  The
//! GetWildcatServerContextHandle and WildcatServerCreateContextByHandle
//! functions are useful if you need to communicate with the Wildcat server
//! under the context of a logged in user.

function GetServiceByName(const name: PChar; var service: TWildcatService): BOOL; stdcall; external 'wcsrv2.dll';

//! Register a service with the Wildcat server.  The port number must be
//! filled in before calling this function.  The service remains registered
//! until the process running the service is disconnected from the Wildcat
//! server.

function RegisterService(var service: TWildcatService): BOOL; stdcall; external 'wcsrv2.dll';
function CheckNetworkAddress(clientip: DWORD): BOOL; stdcall; external 'wcsrv2.dll';

//! These functions are used to arbitrate access to CD-ROM changers and such
//! when files are marked for copy-before-download.  After submitting the
//! pathnames of the files to be retrieved, with a unique Id for each file,
//! GetNextCopyRequest should be called in a loop to determine which file to
//! copy next.  If a positive number is returned, it is the id of a request
//! to copy.  If 0 is returned, there are no more requests.  If -1 is
//! returned there are still requests pending and the application should
//! delay for a short time and keep trying.  When a file has finished
//! copying, RemoveCopyRequest must be called so that other clients may
//! access files they have queued.

function SubmitCopyRequest(id: DWORD; const fn: PChar): BOOL; stdcall; external 'wcsrv2.dll';
function GetNextCopyRequest: DWORD; stdcall; external 'wcsrv2.dll';
function RemoveCopyRequest(id: DWORD): BOOL; stdcall; external 'wcsrv2.dll';

//! Return connection info for the given connectionid or the next higher
//! connectionid. Returns FALSE when there is no higher connectionid.

function GetConnectionInfo(connectionid: DWORD; var ci: TConnectionInfo): BOOL; stdcall; external 'wcsrv2.dll';

//! Modify the amount of time the current user has remaining for the day.
//! Negative values are ok.

function AdjustUserTime(minutes: Longint): BOOL; stdcall; external 'wcsrv2.dll';

function GetWildcatServerInfo(var si: TWildcatServerInfo): BOOL; stdcall; external 'wcsrv2.dll';

function GetUserByKeyIndex(keynum: DWORD; idx: DWORD; var u: TUser; var tid: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function CheckClientAddress(clientip: DWORD; const szIPFile: PChar): BOOL; stdcall; external 'wcsrv2.dll';
function CheckClientAddressEx(clientip: DWORD; const szIPFile: PChar): DWORD; stdcall; external 'wcsrv2.dll';
function CheckMailIntegrity(conf: DWORD; level: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function UpdateMessageFlags(var msg: TMsgHeader): BOOL; stdcall; external 'wcsrv2.dll';
function DeleteMessageAttachment(var msg: TMsgHeader): BOOL; stdcall; external 'wcsrv2.dll';

//! Given computer name, return the server options for the particular machine.
//! If computer name is "" or null, it will turn the default settings for the
//! system wide services.  If you want the current computer server settings,
//! use GetComputerConfig(cc) instead.

function GetComputerConfigEx(szComputerName: PChar; var cc: TComputerConfig): BOOL; stdcall; external 'wcsrv2.dll';

//! User Extended Database/Profile Helper Functions

function ProfileDateToFileDate(const szInt64: PChar; var ft: TFileTime): BOOL; stdcall; external 'wcsrv2.dll';
function GetUserVariableDate(id: DWORD; const section: PChar; const key: PChar; var ft: TFileTime): BOOL; stdcall; external 'wcsrv2.dll';
function GetUserProfileDate(id: DWORD; const key: PChar; var ft: TFileTime): BOOL; stdcall; external 'wcsrv2.dll';
function GetUserProfileDateStr(id: DWORD; const key: PChar; const format: PChar; dest: PChar; destsize: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function GetUserProfileTimeStr(id: DWORD; const key: PChar; const format: PChar; dest: PChar; destsize: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function SetUserVariableDate(id: DWORD; const section: PChar; const key: PChar; var ft: TFileTime): BOOL; stdcall; external 'wcsrv2.dll';
function SetUserProfileDate(id: DWORD; const key: PChar; var ft: TFileTime): BOOL; stdcall; external 'wcsrv2.dll';
function SetUserProfileSystemTime(id: DWORD; const key: PChar; var st: TSystemTime): BOOL; stdcall; external 'wcsrv2.dll';
function GetUserProfileBool(id: DWORD; const key: PChar; var flag: BOOL): BOOL; stdcall; external 'wcsrv2.dll';
function SetUserProfileBool(id: DWORD; const key: PChar; flag: BOOL): BOOL; stdcall; external 'wcsrv2.dll';
function wcCopyFileToTemp(area: DWORD; const fn: PChar): BOOL; stdcall; external 'wcsrv2.dll';
function UpdateUserEx(var user: TUser; const oldpwd: PChar; const newpwd: PChar): BOOL; stdcall; external 'wcsrv2.dll';

//!
//! Wildcat! SASL functions for authentication services
//!
function WcSASLGetMethodName(szMethod: PChar; const dwSize: DWORD; const dwIndex: DWORD): BOOL; stdcall; external 'wcsrv2.dll';

//!
//! Check the SASL Login credentials (user is logged in)
//!
function WcSASLAuthenticateUser(var ctx: TWildcatSASLContext; const szFromClient: PChar; szResponse: PChar; const dwResponseSize: DWORD; var u: TUser): DWORD; stdcall; external 'wcsrv2.dll';

//!
//! Check the SASL Login credentials (user is logged in)
//!
function WcSASLAuthenticateUserEx(var ctx: TWildcatSASLContext; const szFromClient: PChar; szResponse: PChar; const dwResponseSize: DWORD; const dwCallType: DWORD; const szSpeed: PChar; var u: TUser): DWORD; stdcall; external 'wcsrv2.dll';

//!
//! Check the SASL Login credentials (user is not logged in)
//!
function WcSASLCheckAuthentication(var ctx: TWildcatSASLContext; const szFromClient: PChar; szResponse: PChar; const dwResponseSize: DWORD): DWORD; stdcall; external 'wcsrv2.dll';

//!
//! Get the wildcat server process running times
//!
function WcGetProcessTimes(var pt: TWildcatProcessTimes): BOOL; stdcall; external 'wcsrv2.dll';

//!
//! Set the context peer address
//!
function SetContextPeerAddress(const address: DWORD): BOOL; stdcall; external 'wcsrv2.dll';

//! Wildcat! INI File Functions. These Wildcat! INI file
//! functions work similar to the Win32 equivalent private
//! profile functions. The key difference is that Win32
//! INI files are local to the machine, where these Wildcat!
//! INI functions use server side files using the Wildcat!
//! file naming syntax, i.e., "wc:\data\productxyz.ini"
//!

function WcGetPrivateProfileString(const sect: PChar; const key: PChar; const defvalue: PChar; dest: PChar; var destsize: DWORD; const inifile: PChar): BOOL; stdcall; external 'wcsrv2.dll';

function WcWritePrivateProfileString(const sect: PChar; const key: PChar; const value: PChar; const inifile: PChar): BOOL; stdcall; external 'wcsrv2.dll';

function WcGetPrivateProfileSection(const sect: PChar; dest: PChar; var destsize: DWORD; const inifile: PChar): BOOL; stdcall; external 'wcsrv2.dll';

//! Extended WcCreateFileEx() function returns TwcOpenFileInfo
//! structure. Useful when you need to open a file and obtain
//! file information in one single RPC call.

function WcCreateFileEx(const fn: PChar; access: DWORD; sharemode: DWORD; create: DWORD; var pwcofi: TwcOpenFileInfo): THandle; stdcall; external 'wcsrv2.dll';

//! GetConnectionInfoFromChallenge() function returns TConnectionInfo
//! for a given challenge.

function GetConnectionInfoFromChallenge(const challenge: PChar; var ci: TConnectionInfo): BOOL; stdcall; external 'wcsrv2.dll';

//! DeleteUserVariable - delete extended user section or key

function DeleteUserVariable(id: DWORD; const section: PChar; const key: PChar): BOOL; stdcall; external 'wcsrv2.dll';

//! WcCheckUserName - Return FALSE if user name has invalid characters

function WcCheckUserName(const szName: PChar): BOOL; stdcall; external 'wcsrv2.dll';

//! WcSetMessageAttachments - helps prepare attachment field

function WcSetMessageAttachment(var msg: TMsgHeader; const szFileName: PChar; const bCopyTo: BOOL): BOOL; stdcall; external 'wcsrv2.dll';

//! WcLocalCopyToServer - copy local side file to server side wc:\ file

function WcLocalCopyToServer(const szLocal: PChar; const szServer: PChar; const msSlice: Longint): BOOL; stdcall; external 'wcsrv2.dll';

//! Domain Server Functions

function GetMakewildEx(const szDomain: PChar; const setdomain: BOOL; var mw: TMakewild): BOOL; stdcall; external 'wcsrv2.dll';
function WcSetCurrentDomain(const szDomain: PChar): BOOL; stdcall; external 'wcsrv2.dll';
function WcGetCurrentDomain(szDomain: PChar; dwSize: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function WcGetDefaultDomain(szBuffer: PChar; const dwSize: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function WcGetDomainCount: DWORD; stdcall; external 'wcsrv2.dll';
function WcGetDomain(const index: DWORD; szDomain: PChar; dwSize: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function WcGetDomainConfigString(const szDomain: PChar; const szSection: PChar; const szKey: PChar; szValue: PChar; const dwSize: DWORD; const szDefault: PChar): BOOL; stdcall; external 'wcsrv2.dll';
function WcGetDomainConfigBool(const szDomain: PChar; const szSection: PChar; const szKey: PChar; var bVal: BOOL; bDef: BOOL): BOOL; stdcall; external 'wcsrv2.dll';
function WcGetDomainConfigInt(const szDomain: PChar; const szSection: PChar; const szKey: PChar; var dwValue: DWORD; dwDefault: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function WcGetDomainConfigSection(const szDomain: PChar; const szSection: PChar; szBuffer: PChar; const dwBufSize: DWORD; var dwSize: DWORD): BOOL; stdcall; external 'wcsrv2.dll';
function WcGetHttpConfigVar(const szSection: PChar; const szKey: PChar; szValue: PChar; const dwSize: DWORD; const szDefault: PChar): BOOL; stdcall; external 'wcsrv2.dll';
function WcGetConfigFileVar(const szFile: PChar; const szSection: PChar; const szKey: PChar; szValue: PChar; const dwSize: DWORD; const szDefault: PChar): BOOL; stdcall; external 'wcsrv2.dll';
function WcGetVirtualDomainBool(const szDomain: PChar; const szSection: PChar; const szKey: PChar; var bVal: BOOL; bDef: BOOL): BOOL; stdcall; external 'wcsrv2.dll';
function WcGetVirtualDomainVar(const szDomain: PChar; const szSection: PChar; const szKey: PChar; szValue: PChar; const dwSize: DWORD; const szDefault: PChar): BOOL; stdcall; external 'wcsrv2.dll';

//! Set Context/Connection Status (activity)

function WcSetConnectionStatus(const activity: PChar): BOOL; stdcall; external 'wcsrv2.dll';

//! Get unique server guid across all clients, see structure TWildcatServerGuid
//!

function WcGetWildcatServerGuid(var wg: TWildcatServerGuid): BOOL; stdcall; external 'wcsrv2.dll';

//! Get unique QUEUE guid, see structure TWildcatServerGuid
//!

function WcGetWildcatQueueGuid(const qname: PChar; var wg: TWildcatServerGuid): BOOL; stdcall; external 'wcsrv2.dll';

//! Get Geographical Location Information by IP Address
//!

function WcGetGeoIP(const ip: PChar; var geoip: TWildcatGeoIP; const lang: PChar): BOOL; stdcall; external 'wcsrv2.dll';

implementation

end.
