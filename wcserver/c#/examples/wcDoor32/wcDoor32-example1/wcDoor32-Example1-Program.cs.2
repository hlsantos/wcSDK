#define USE_CALLBACK

using System;
using System.Runtime.InteropServices;
using System.Text;
using wcSDK;

namespace wcDoor32_example1
{
    class Program
    {

        public static int Wprintf(string fmt, params object[] v)
        {
            String buf = "";
            if (v.Length == 0) buf = fmt;
            buf = String.Format(fmt, v);
            byte[] data = Encoding.ASCII.GetBytes(buf);
            wcDoor32API.DoorWrite(data, data.Length);
            return 0;
        }

#if USE_CALLBACK
        #region "Private Delegates ..."
        #endregion

        [DllImport("kernel32.dll")]
        static extern bool SetEvent(IntPtr hEvent);

        private static uint SystemControlNodeChannel = 0;
        public static int WildcatCallBackFunc(int UserData, ref wcServerAPI.TChannelMessage msg)
        {
            Console.WriteLine("msg.Channel: {0} msg.SenderId: {1}, msg.UserData: {2}", msg.Channel,msg.SenderId, msg.UserData);
            if (msg.Channel == SystemControlNodeChannel)
            {
                switch (msg.UserData)
                {
                    case wcServerAPI.SC_DISCONNECT:
                        SetEvent((IntPtr)wcDoor32API.DoorGetOfflineEventHandle());
                        Console.WriteLine("SC_DISCONNECT");
                        break;
                }
            }
            return 0;
        }
#endif    

        public static int StartDoor()
        {
            if (!wcDoor32API.DoorInitialize())
            {
                int err = Marshal.GetLastWin32Error();
                if (err == 203)
                {
                    //ERROR_ENVVAR_NOT_FOUND no environment, not called by Wildcat! door32 system.
                    Console.WriteLine("! Error {0}: wcDoor32 Environment not found.", err);
                    return 0;
                }
                Console.WriteLine("! Error {0}: DoorInitialize ", err);
                return 0;
            }
#if USE_CALLBACK
            wcServerAPI.TWildcatCallBack myCallBack = new wcServerAPI.TWildcatCallBack(WildcatCallBackFunc);
            wcServerAPI.SetupWildcatCallback(myCallBack, 0);
            string sNode = string.Format("system.control.{0}", wcServerAPI.GetNode());
            SystemControlNodeChannel = (uint)wcServerAPI.OpenChannel(sNode);
            Console.WriteLine("* node: {0} OpenChannel(\"{1}\") : SystemControlNodeChannel: {2}", 
                wcServerAPI.GetNode(), sNode, SystemControlNodeChannel);
#endif
            Console.WriteLine("* DoorInitialize() OK");

            // Get the current user logged in

            wcServerAPI.TUser User = new wcServerAPI.TUser();
            wcServerAPI.WildcatLoggedIn(ref User);

            User.Info.Name = User.Info.Name.Trim();
            Wprintf("@T@Welcome to WcDoor32.Net Example #1, {0}.@N@\r\n", User.Info.Name);
            Wprintf("\r\n@E@nPress ESCAPE or 1 to quit:@N@\r\n");

            wcServerAPI.SetNodeActivity("wcDoor32.Net Example1!");

            int Active = 2;         // When 1 pending idle timeout, when 0 exit
            int idleTimeout = 60;  // seconds

            while (Active != 0)
            {
                switch (wcDoor32API.DoorEvent(idleTimeout * 1000))
                {
                    case wcDoor32API.WCDOOR_EVENT_KEYBOARD:
                        Active = 2;
                        byte[] data = new byte[1];
                        int rd = wcDoor32API.DoorRead(data, data.Length);
                        byte ch = data[0];
#if DEBUG
                        Console.WriteLine("rd: {0} ch: {1} {2:X}", rd, ch, ch);
#endif
                        //if (ch == 27) { Active = 0; break; }
                        if (ch == '1') { Active = 0; break; }

                        wcDoor32API.DoorWrite(data, rd);
                        if (ch == 13) { data[0] = 10; wcDoor32API.DoorWrite(data, 1); }
                        break;
                    case wcDoor32API.WCDOOR_EVENT_OFFLINE:
                        Wprintf("\r\n** FORCE DISCONNECT **\r\n");
                        Console.WriteLine("** WCDOOR_EVENT_OFFLINE - GOODBYE **");
                        Active = 0;
                        break;

                    case wcDoor32API.WCDOOR_EVENT_TIMEOUT:
                        Active--;
                        switch (Active)
                        {
                            case 0:
                                Wprintf("\r\n** IDLE TIMEOUT - GOODBYE **\r\n");
                                break;
                            case 1:
                                Wprintf("\r\n** IDLE TIMEOUT IN {0} SECONDS **\r\n", idleTimeout);
                                break;
                        }
                        break;

                    case wcDoor32API.WCDOOR_EVENT_FAILED:
                        Console.WriteLine("** WCDOOR_EVENT_FAILED - GOODBYE **");
                        Active = 0;
                        break;
                }
            }

            Wprintf("\r\n\r\nReturning to bbs...\r\n");
            wcDoor32API.DoorShutdown();
            return 0;
        }

        static void Main(string[] args)
        {
            Console.WriteLine("* Starting wcDOOR32.Net Door **");
            StartDoor();
            Console.WriteLine("* Ending wcDOOR32.Net Door **");
            Console.Write("<pause>"); Console.ReadKey();
            //System.Threading.Thread.Sleep(5000);
        }
    }
}
